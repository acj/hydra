/**
 *  genericLex.jj
 * UML/Hydra generic utility parser
 */

options {
  LOOKAHEAD=200;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
  STATIC = false;
}

PARSER_BEGIN(genericLex1)

package h2PVisitors.Parser;

import h2PNodes.*;
import java.io.*;
import h2PFoundation.*;
import h2PVisitors.*;

public class genericLex1 extends NodeUtilityClass  {
  protected Reader dataStream;

  public genericLex1() {
  	this(new StringReader("This is a test string"));
  }
  
  public AcceptReturnType Parse_Me (String parseType, String expresssion) /*throws ParseException*/ {
  	 AcceptReturnType tmpART = new AcceptReturnType();
  	 
  	 dataStream = new StringReader (parseType + "\n" + expresssion);
  	 ReInit(dataStream);
  	 try {
  	 	tmpART.merge(stmt());
  	 }  catch (ParseException pe) {
  	 	tmpART.addStr("error", "true");
  	 	println ("Warning: parse error detected in Generic Lex. '" + parseType + "'");
  	 	println ("         entry-> '" + expresssion + "'");
  	 	
  	 	// throw pe;
  	 } 
  	 return tmpART;
  }
  
}

PARSER_END(genericLex1)

TOKEN:
{
	< MAKE_OUT: "make_out" > : MAKE_OUT_STATE
}

<*>TOKEN:
{
    < #DIGIT: ["0" - "9"] >
|   < #LETTER: ["A"-"Z"] | ["a"-"z"] >
|   < #WEIRD: ["A"-"z"] >
// |  <NUM: <DIGIT> >
// |  <ID: (<LETTER> | "_")(<LETTER> | "_" | <DIGIT>)*  >
|   < DELIMETER: "\n">
}

<MAKE_OUT_STATE>TOKEN:
{
	< WEIRDTOK : <WEIRD> | <DIGIT> >
//	< LABEL: (<WEIRD>)+ ":">
|	< LABELTOK : ":">
|	< ALL_ELSE: (~[])>
}

AcceptReturnType stmt() throws ParseException:
{
	AcceptReturnType tmpART = new AcceptReturnType();
	AcceptReturnType retART;
}
{
	(
		<MAKE_OUT> 
		<DELIMETER>
		retART = make_out() { tmpART.merge(retART); }
	)
	{ return tmpART; }
}


AcceptReturnType make_out() throws ParseException:
{
	AcceptReturnType tmpART = new AcceptReturnType();
	String tmpStr = "";
	String tmpLabel = "";
	Token t;
}
{
/*	(
		t = <LABEL> { tmpART.addStr("label", t.image); }
	)?
	(
		t = <ALL_ELSE> { tmpStr += t.image;}
	)* { tmpART.addStr ("rest", tmpStr); }
	{ return tmpART; }
*/
	(
		(
		    t = <WEIRDTOK> { tmpLabel += t.image; }
		)+
		t = <LABELTOK> { tmpLabel += t.image; }
	)?  { tmpART.addStr("label", tmpLabel); }
	(
			t = <ALL_ELSE> { tmpStr += t.image;}
		|	t = <WEIRDTOK> { tmpStr += t.image; }
		|	t = <LABELTOK> { tmpStr += t.image; }
	)* { tmpART.addStr ("rest", tmpStr); }
	
	{ 
		/*
		println ("Found: label = '" + tmpLabel + "'");
		println ("       rest  = '" + tmpStr + "'");
		*/
		return tmpART; 
	}
}
