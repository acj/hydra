/* Generated By:JavaCC: Do not edit this line. UMLParser1TokenManager.java */
package h2PVisitors.Parser;
import h2PNodes.*;
import h2PFoundation.*;

public class UMLParser1TokenManager implements UMLParser1Constants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000000000000L) != 0L)
            return 6;
         if ((active0 & 0x10fffef7f7f800L) != 0L)
         {
            jjmatchedKind = 66;
            return 8;
         }
         if ((active0 & 0x8080000L) != 0L)
         {
            jjmatchedKind = 66;
            return 15;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 27;
         }
         if ((active0 & 0x10000040001000L) != 0L)
            return 8;
         if ((active0 & 0xfffeb7ffe800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 8;
         }
         return -1;
      case 2:
         if ((active0 & 0x48000002000L) != 0L)
            return 8;
         if ((active0 & 0xfb7ebfffc800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 8;
         }
         return -1;
      case 3:
         if ((active0 & 0x1a0c00010000L) != 0L)
            return 8;
         if ((active0 & 0xe172bffec800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 8;
         }
         return -1;
      case 4:
         if ((active0 & 0x2140100a8000L) != 0L)
            return 8;
         if ((active0 & 0xc032aff44800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
            return 8;
         }
         return -1;
      case 5:
         if ((active0 & 0x85000000L) != 0L)
            return 8;
         if ((active0 & 0xc0322af44800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 5;
            return 8;
         }
         return -1;
      case 6:
         if ((active0 & 0xc0202af40800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
            return 8;
         }
         if ((active0 & 0x1200004000L) != 0L)
            return 8;
         return -1;
      case 7:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xc0202a740800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 7;
            return 8;
         }
         return -1;
      case 8:
         if ((active0 & 0x202a740000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 8;
            return 8;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xc00000000800L) != 0L)
            return 8;
         return -1;
      case 9:
         if ((active0 & 0x200a700000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
            return 8;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x20040000L) != 0L)
            return 8;
         return -1;
      case 10:
         if ((active0 & 0xa000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 10;
            }
            return 8;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x2000700000L) != 0L)
            return 8;
         return -1;
      case 11:
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 11;
            return 8;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 12;
            return 8;
         }
         return -1;
      case 13:
         if ((active0 & 0xa000000L) != 0L)
            return 8;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 10);
      case 38:
         return jjStopAtPos(0, 48);
      case 40:
         return jjStopAtPos(0, 58);
      case 41:
         return jjStopAtPos(0, 59);
      case 42:
         return jjStopAtPos(0, 56);
      case 43:
         return jjStopAtPos(0, 54);
      case 44:
         return jjStopAtPos(0, 61);
      case 45:
         return jjStartNfaWithStates_1(0, 55, 6);
      case 46:
         return jjStopAtPos(0, 60);
      case 58:
         return jjMoveStringLiteralDfa1_1(0x20000000000000L);
      case 59:
         return jjStopAtPos(0, 57);
      case 65:
         return jjMoveStringLiteralDfa1_1(0x80700000L);
      case 67:
         return jjMoveStringLiteralDfa1_1(0x8080000L);
      case 68:
         return jjMoveStringLiteralDfa1_1(0x40000L);
      case 70:
         return jjMoveStringLiteralDfa1_1(0x800L);
      case 71:
         return jjMoveStringLiteralDfa1_1(0x2000000L);
      case 72:
         return jjMoveStringLiteralDfa1_1(0x1000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_1(0x402200000000L);
      case 74:
         return jjMoveStringLiteralDfa1_1(0x400000000L);
      case 77:
         return jjMoveStringLiteralDfa1_1(0x20000L);
      case 79:
         return jjMoveStringLiteralDfa1_1(0x800000L);
      case 80:
         return jjMoveStringLiteralDfa1_1(0x20000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_1(0x14000000L);
      case 84:
         return jjMoveStringLiteralDfa1_1(0x20000000L);
      case 87:
         return jjMoveStringLiteralDfa1_1(0x10000000000L);
      case 91:
         return jjStopAtPos(0, 8);
      case 93:
         return jjStopAtPos(0, 9);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x1009000L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x40000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x200000004000L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x8c000002000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x800040000000L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x10000L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x100000000000L);
      case 123:
         return jjStopAtPos(0, 6);
      case 124:
         return jjStopAtPos(0, 50);
      case 125:
         return jjStopAtPos(0, 7);
      case 126:
         return jjStopAtPos(0, 49);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0xc0002000000L);
      case 103:
         return jjMoveStringLiteralDfa2_1(active0, 0x600000L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x110000010000L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x801004000000L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x88000L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 52, 8);
         return jjMoveStringLiteralDfa2_1(active0, 0x402200000000L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(1, 30, 8);
         return jjMoveStringLiteralDfa2_1(active0, 0x408020800L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x200820844000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(1, 12, 8);
         return jjMoveStringLiteralDfa2_1(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0xc000000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x30080000L);
      case 98:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 39, 8);
         break;
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0x830000L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0x4600000L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x200600040000L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x800008000000L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x80002000000L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x10801004000L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000800L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x3000100000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000L);
      case 118:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(2, 13, 8);
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000000L);
      case 119:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 42, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 43, 8);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_1(active0, 0x804002820000L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(3, 16, 8);
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000000L);
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(3, 35, 8);
         return jjMoveStringLiteralDfa4_1(active0, 0x4800L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(3, 34, 8);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 44, 8);
         return jjMoveStringLiteralDfa4_1(active0, 0x200024000000L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x108000L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x1600000L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 41, 8);
         return jjMoveStringLiteralDfa4_1(active0, 0x3210000000L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x2004000800L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(4, 28, 8);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 40, 8);
         return jjMoveStringLiteralDfa5_1(active0, 0x644000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x800200000000L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(4, 17, 8);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x1088000000L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 38, 8);
         return jjMoveStringLiteralDfa5_1(active0, 0x400002800000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(4, 19, 8);
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 45, 8);
         break;
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(4, 15, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x202000000L);
      case 101:
         return jjMoveStringLiteralDfa6_1(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x600000L);
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x400020100000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(5, 26, 8);
         return jjMoveStringLiteralDfa6_1(active0, 0x4800L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(5, 31, 8);
         return jjMoveStringLiteralDfa6_1(active0, 0x802000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000040000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(5, 24, 8);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000L);
      case 97:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(6, 14, 8);
         return jjMoveStringLiteralDfa7_1(active0, 0x400000700000L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_1(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000800L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(6, 33, 8);
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000L);
      case 118:
         return jjMoveStringLiteralDfa7_1(active0, 0x800000000000L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 36, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_1(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x22040000L);
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x400000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_1(active0, 0x8700000L);
      case 122:
         return jjMoveStringLiteralDfa8_1(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_1(active0, 0x800000L);
      case 86:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(8, 11, 8);
         return jjMoveStringLiteralDfa9_1(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x700000L);
      case 108:
         return jjMoveStringLiteralDfa9_1(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x20000000L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 47, 8);
         break;
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 46, 8);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
private final int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa10_1(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0x2002000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(9, 18, 8);
         break;
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(9, 29, 8);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_1(active0, 0xf00000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
private final int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(10, 20, 8);
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_1(active0, 0xc00000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(10, 37, 8);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_1(active0, 0xa000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
private final int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_1(active0, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa12_1(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa12_1(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa12_1(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
private final int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa13_1(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa13_1(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa13_1(active0, 0x8800000L);
      default :
         break;
   }
   return jjStartNfa_1(11, active0);
}
private final int jjMoveStringLiteralDfa13_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(13, 27, 8);
         break;
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(13, 25, 8);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_1(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa14_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(12, active0);
}
private final int jjMoveStringLiteralDfa14_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_1(active0, 0x800000L);
      case 98:
         return jjMoveStringLiteralDfa15_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(13, active0);
}
private final int jjMoveStringLiteralDfa15_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa16_1(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa16_1(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_1(14, active0);
}
private final int jjMoveStringLiteralDfa16_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_1(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa17_1(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_1(15, active0);
}
private final int jjMoveStringLiteralDfa17_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_1(active0, 0x400000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(17, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_1(16, active0);
}
private final int jjMoveStringLiteralDfa18_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa19_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(17, active0);
}
private final int jjMoveStringLiteralDfa19_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa20_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(18, active0);
}
private final int jjMoveStringLiteralDfa20_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa21_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(19, active0);
}
private final int jjMoveStringLiteralDfa21_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa22_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(20, active0);
}
private final int jjMoveStringLiteralDfa22_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(20, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa23_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(21, active0);
}
private final int jjMoveStringLiteralDfa23_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(21, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa24_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(22, active0);
}
private final int jjMoveStringLiteralDfa24_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(22, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa25_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(23, active0);
}
private final int jjMoveStringLiteralDfa25_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(23, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa26_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(24, active0);
}
private final int jjMoveStringLiteralDfa26_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(24, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa27_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(25, active0);
}
private final int jjMoveStringLiteralDfa27_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(25, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa28_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(26, active0);
}
private final int jjMoveStringLiteralDfa28_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(26, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa29_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(27, active0);
}
private final int jjMoveStringLiteralDfa29_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(27, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa30_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(28, active0);
}
private final int jjMoveStringLiteralDfa30_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(28, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(30, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_1(29, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 29;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 27:
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(8);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(8);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(6);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(6);
                  else if (curChar == 33)
                     jjCheckNAdd(1);
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  else if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if (curChar == 61 && kind > 51)
                     kind = 51;
                  break;
               case 2:
                  if (curChar == 33)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(8);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(8);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(8);
                  }
                  if (curChar == 67)
                     jjAddStates(0, 1);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 67)
                     jjAddStates(0, 1);
                  break;
               case 10:
                  if (curChar == 101 && kind > 32)
                     kind = 32;
                  break;
               case 11:
               case 16:
                  if (curChar == 116)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 29 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8080000L) != 0L)
         {
            jjmatchedKind = 66;
            return 30;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 6;
         if ((active0 & 0x10fffef7f7f800L) != 0L)
         {
            jjmatchedKind = 66;
            return 8;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 42;
         }
         if ((active0 & 0x10000040001000L) != 0L)
            return 8;
         if ((active0 & 0xfffeb7ffe800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 8;
         }
         return -1;
      case 2:
         if ((active0 & 0x48000002000L) != 0L)
            return 8;
         if ((active0 & 0xfb7ebfffc800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 8;
         }
         return -1;
      case 3:
         if ((active0 & 0x1a0c00010000L) != 0L)
            return 8;
         if ((active0 & 0xe172bffec800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 8;
         }
         return -1;
      case 4:
         if ((active0 & 0x2140100a8000L) != 0L)
            return 8;
         if ((active0 & 0xc032aff44800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
            return 8;
         }
         return -1;
      case 5:
         if ((active0 & 0x85000000L) != 0L)
            return 8;
         if ((active0 & 0xc0322af44800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 5;
            return 8;
         }
         return -1;
      case 6:
         if ((active0 & 0xc0202af40800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
            return 8;
         }
         if ((active0 & 0x1200004000L) != 0L)
            return 8;
         return -1;
      case 7:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xc0202a740800L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 7;
            return 8;
         }
         return -1;
      case 8:
         if ((active0 & 0x202a740000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 8;
            return 8;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xc00000000800L) != 0L)
            return 8;
         return -1;
      case 9:
         if ((active0 & 0x200a700000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
            return 8;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x20040000L) != 0L)
            return 8;
         return -1;
      case 10:
         if ((active0 & 0xa000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 10;
            }
            return 8;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x2000700000L) != 0L)
            return 8;
         return -1;
      case 11:
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 11;
            return 8;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 12;
            return 8;
         }
         return -1;
      case 13:
         if ((active0 & 0xa000000L) != 0L)
            return 8;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 67);
      case 38:
         return jjStopAtPos(0, 48);
      case 40:
         return jjStopAtPos(0, 58);
      case 41:
         return jjStopAtPos(0, 59);
      case 42:
         return jjStopAtPos(0, 56);
      case 43:
         return jjStopAtPos(0, 54);
      case 44:
         return jjStopAtPos(0, 61);
      case 45:
         return jjStartNfaWithStates_0(0, 55, 6);
      case 46:
         return jjStopAtPos(0, 60);
      case 47:
         return jjStopAtPos(0, 68);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 59:
         return jjStopAtPos(0, 57);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x80700000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8080000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x402200000000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x14000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 94:
         return jjStopAtPos(0, 69);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1009000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200000004000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8c000002000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800040000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 124:
         return jjStopAtPos(0, 50);
      case 126:
         return jjStopAtPos(0, 49);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0002000000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x110000010000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x801004000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x402200000000L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x408020800L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200820844000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x30080000L);
      case 98:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 8);
         break;
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x830000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x4600000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200600040000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800008000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80002000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10801004000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000800L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000100000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 118:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 119:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 8);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x804002820000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x4800L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 8);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x200024000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x108000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1600000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x3210000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2004000800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 8);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x644000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800200000000L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 8);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1088000000L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x400002800000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 8);
         break;
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x202000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400020100000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x4800L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x802000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000040000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 97:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000700000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000800L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x22040000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8700000L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 8);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x700000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 8);
         break;
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 8);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2002000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 18, 8);
         break;
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 8);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0xf00000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 20, 8);
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0xc00000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 37, 8);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0xa000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x8800000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 27, 8);
         break;
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 25, 8);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(17, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa24_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private final int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa25_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private final int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private final int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa27_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
private final int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa28_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
private final int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa29_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
private final int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa30_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L);
}
private final int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(30, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(29, active0, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 44;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(6);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(2, 4);
                  else if (curChar == 45)
                     jjCheckNAdd(6);
                  else if (curChar == 33)
                     jjCheckNAdd(1);
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  else if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 42:
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(8);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(8);
                  break;
               case 1:
                  if (curChar == 61 && kind > 51)
                     kind = 51;
                  break;
               case 2:
                  if (curChar == 33)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(6);
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjAddStates(5, 6);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjAddStates(7, 8);
                  break;
               case 15:
                  if (curChar == 39)
                     jjCheckNAddStates(2, 4);
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 18:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 19:
                  if (curChar == 39 && kind > 73)
                     kind = 73;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 123)
                     jjCheckNAdd(13);
                  else if (curChar == 91)
                     jjCheckNAdd(10);
                  if (curChar == 67)
                     jjAddStates(13, 14);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(8);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(8);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 91)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 93 && kind > 71)
                     kind = 71;
                  break;
               case 12:
                  if (curChar == 123)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 125 && kind > 72)
                     kind = 72;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(15, 17);
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 24:
                  if (curChar == 67)
                     jjAddStates(13, 14);
                  break;
               case 25:
                  if (curChar == 101 && kind > 32)
                     kind = 32;
                  break;
               case 26:
               case 31:
                  if (curChar == 116)
                     jjCheckNAdd(25);
                  break;
               case 27:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 6);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 8);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 44 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   15, 28, 16, 17, 19, 10, 11, 13, 14, 16, 17, 21, 19, 30, 43, 18, 
   20, 22, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\173", "\175", "\133", "\135", "\42", 
"\106\157\162\155\141\154\151\172\145", "\141\163", "\163\155\166", "\160\162\157\155\145\154\141", 
"\141\154\154\157\171", "\166\150\144\154", "\115\157\144\145\154", 
"\104\162\151\166\145\162\106\151\154\145", "\103\154\141\163\163", "\101\163\163\157\143\151\141\164\151\157\156", 
"\101\147\147\162\145\147\141\164\151\157\156", 
"\101\147\147\162\145\147\141\164\151\157\156\55\123\165\142\143\154\141\163\163\55\103\157\156\163\164\162\141\151\156\164", "\117\162\144\145\162\145\144\55\103\157\156\163\164\162\141\151\156\164", 
"\141\144\157\162\156\163", "\107\145\156\145\162\141\154\151\172\141\164\151\157\156", 
"\123\151\147\156\141\154", "\103\157\155\160\157\163\151\164\145\123\164\141\164\145", 
"\123\164\141\164\145", "\124\162\141\156\163\151\164\151\157\156", "\164\157", 
"\101\143\164\151\157\156", null, "\111\156\151\164\151\141\154", "\112\157\151\156", "\146\162\157\155", 
"\110\151\163\164\157\162\171", "\111\156\163\164\141\156\143\145\126\141\162", "\163\165\160\145\162", 
"\163\165\142", "\127\150\157\154\145", "\120\141\162\164", "\156\145\167", 
"\163\145\156\144", "\167\150\145\156", "\160\162\151\156\164", 
"\111\156\166\141\162\151\141\156\164", "\164\151\155\145\151\156\166\141\162", "\46", "\176", "\174", null, 
"\151\156", "\72\75", "\53", "\55", "\52", "\73", "\50", "\51", "\56", "\54", null, null, 
null, null, null, "\42", "\57", "\136", null, null, null, null, };
public static final String[] lexStateNames = {
   "IN_EXPRESSION_GRAMMAR", 
   "DEFAULT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3fffffffffffffc1L, 0x3beL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[44];
private final int[] jjstateSet = new int[88];
protected char curChar;
public UMLParser1TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public UMLParser1TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 44; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
