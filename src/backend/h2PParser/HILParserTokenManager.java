/* Generated By:JavaCC: Do not edit this line. HILParserTokenManager.java */
package backend.h2PParser;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import backend.h2PNodes.*;
import backend.h2PFoundation.*;
import backend.h2PFoundation.Symbol.SymbolType;

/** Token Manager. */
public class HILParserTokenManager implements HILParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x207ffef7f7f800L) != 0L)
         {
            jjmatchedKind = 67;
            return 46;
         }
         if ((active0 & 0x800000000000L) != 0L)
            return 39;
         if ((active0 & 0x8080000L) != 0L)
         {
            jjmatchedKind = 67;
            return 24;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x20000040001000L) != 0L)
            return 46;
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
            return 36;
         }
         if ((active0 & 0x7ffeb7ffe800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
            return 46;
         }
         return -1;
      case 2:
         if ((active0 & 0x20000002000L) != 0L)
            return 46;
         if ((active0 & 0x7dfebfffc800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
            return 46;
         }
         return -1;
      case 3:
         if ((active0 & 0xd4c00010000L) != 0L)
            return 46;
         if ((active0 & 0x70b2bffec800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
            return 46;
         }
         return -1;
      case 4:
         if ((active0 & 0x1080100a8000L) != 0L)
            return 46;
         if ((active0 & 0x6032aff44800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
            return 46;
         }
         return -1;
      case 5:
         if ((active0 & 0x85000000L) != 0L)
            return 46;
         if ((active0 & 0x60322af44800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
            return 46;
         }
         return -1;
      case 6:
         if ((active0 & 0x1200004000L) != 0L)
            return 46;
         if ((active0 & 0x60202af40800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
            return 46;
         }
         return -1;
      case 7:
         if ((active0 & 0x60202a740800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
            return 46;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x600000000800L) != 0L)
            return 46;
         if ((active0 & 0x202a740000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 8;
            return 46;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x20040000L) != 0L)
            return 46;
         if ((active0 & 0x200a700000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 9;
            return 46;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000700000L) != 0L)
            return 46;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xa000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 10;
            }
            return 46;
         }
         return -1;
      case 11:
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 11;
            return 46;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 12;
            return 46;
         }
         return -1;
      case 13:
         if ((active0 & 0xa000000L) != 0L)
            return 46;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 10);
      case 40:
         return jjStopAtPos(0, 59);
      case 41:
         return jjStopAtPos(0, 60);
      case 42:
         return jjStopAtPos(0, 57);
      case 43:
         return jjStopAtPos(0, 55);
      case 44:
         return jjStopAtPos(0, 62);
      case 45:
         return jjStartNfaWithStates_1(0, 56, 17);
      case 46:
         return jjStopAtPos(0, 61);
      case 59:
         return jjStopAtPos(0, 58);
      case 60:
         return jjStartNfaWithStates_1(0, 47, 39);
      case 65:
         return jjMoveStringLiteralDfa1_1(0x80700000L);
      case 67:
         return jjMoveStringLiteralDfa1_1(0x8080000L);
      case 68:
         return jjMoveStringLiteralDfa1_1(0x40000L);
      case 69:
         return jjMoveStringLiteralDfa1_1(0x4000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_1(0x800L);
      case 71:
         return jjMoveStringLiteralDfa1_1(0x2000000L);
      case 72:
         return jjMoveStringLiteralDfa1_1(0x1000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_1(0x202200000000L);
      case 74:
         return jjMoveStringLiteralDfa1_1(0x400000000L);
      case 77:
         return jjMoveStringLiteralDfa1_1(0x20000L);
      case 79:
         return jjMoveStringLiteralDfa1_1(0x800000L);
      case 80:
         return jjMoveStringLiteralDfa1_1(0x10000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_1(0x14000000L);
      case 84:
         return jjMoveStringLiteralDfa1_1(0x20000000L);
      case 87:
         return jjMoveStringLiteralDfa1_1(0x8000000000L);
      case 91:
         return jjStopAtPos(0, 8);
      case 93:
         return jjStopAtPos(0, 9);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x1009000L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x20000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x20000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x100000004000L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x40000002000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x400040000000L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x10000L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x80000000000L);
      case 123:
         return jjStopAtPos(0, 6);
      case 125:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x60002000000L);
      case 103:
         return jjMoveStringLiteralDfa2_1(active0, 0x600000L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x88000010000L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x401004000000L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x88000L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 53, 46);
         return jjMoveStringLiteralDfa2_1(active0, 0x206200000000L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(1, 30, 46);
         return jjMoveStringLiteralDfa2_1(active0, 0x408020800L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x100820844000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(1, 12, 46);
         return jjMoveStringLiteralDfa2_1(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x30080000L);
      case 100:
         return jjMoveStringLiteralDfa3_1(active0, 0x830000L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0x4600000L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x100600040000L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x400008000000L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x40002000000L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x8801004000L);
      case 114:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000800L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x3000100000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000000L);
      case 118:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(2, 13, 46);
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000000L);
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 41, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000000000L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 42, 46);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_1(active0, 0x400002820000L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(3, 16, 46);
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000L);
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(3, 35, 46);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 38, 46);
         return jjMoveStringLiteralDfa4_1(active0, 0x4800L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(3, 34, 46);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 43, 46);
         return jjMoveStringLiteralDfa4_1(active0, 0x100024000000L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x108000L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x1600000L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 40, 46);
         return jjMoveStringLiteralDfa4_1(active0, 0x3210000000L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x2004000800L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(4, 28, 46);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 39, 46);
         return jjMoveStringLiteralDfa5_1(active0, 0x644000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x400200000000L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(4, 17, 46);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x1088000000L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x200002800000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(4, 19, 46);
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 44, 46);
         break;
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(4, 15, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x202000000L);
      case 101:
         return jjMoveStringLiteralDfa6_1(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x600000L);
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x200020100000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(5, 26, 46);
         return jjMoveStringLiteralDfa6_1(active0, 0x4800L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(5, 31, 46);
         return jjMoveStringLiteralDfa6_1(active0, 0x402000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000040000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(5, 24, 46);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000L);
      case 97:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(6, 14, 46);
         return jjMoveStringLiteralDfa7_1(active0, 0x200000700000L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_1(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000800L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(6, 33, 46);
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000L);
      case 118:
         return jjMoveStringLiteralDfa7_1(active0, 0x400000000000L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 36, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_1(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_1(active0, 0x22040000L);
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_1(active0, 0x8700000L);
      case 122:
         return jjMoveStringLiteralDfa8_1(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_1(active0, 0x800000L);
      case 86:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(8, 11, 46);
         return jjMoveStringLiteralDfa9_1(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x700000L);
      case 108:
         return jjMoveStringLiteralDfa9_1(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x20000000L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 46, 46);
         break;
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 45, 46);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa10_1(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0x2002000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(9, 18, 46);
         break;
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(9, 29, 46);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_1(active0, 0xf00000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(10, 20, 46);
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_1(active0, 0xc00000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(10, 37, 46);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_1(active0, 0xa000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_1(active0, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa12_1(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa12_1(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa12_1(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa13_1(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa13_1(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa13_1(active0, 0x8800000L);
      default :
         break;
   }
   return jjStartNfa_1(11, active0);
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(13, 27, 46);
         break;
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(13, 25, 46);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_1(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa14_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(12, active0);
}
private int jjMoveStringLiteralDfa14_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_1(active0, 0x800000L);
      case 98:
         return jjMoveStringLiteralDfa15_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(13, active0);
}
private int jjMoveStringLiteralDfa15_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa16_1(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa16_1(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_1(14, active0);
}
private int jjMoveStringLiteralDfa16_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_1(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa17_1(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_1(15, active0);
}
private int jjMoveStringLiteralDfa17_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_1(active0, 0x400000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(17, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_1(16, active0);
}
private int jjMoveStringLiteralDfa18_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa19_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(17, active0);
}
private int jjMoveStringLiteralDfa19_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa20_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(18, active0);
}
private int jjMoveStringLiteralDfa20_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa21_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(19, active0);
}
private int jjMoveStringLiteralDfa21_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa22_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(20, active0);
}
private int jjMoveStringLiteralDfa22_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa23_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(21, active0);
}
private int jjMoveStringLiteralDfa23_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa24_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(22, active0);
}
private int jjMoveStringLiteralDfa24_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa25_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(23, active0);
}
private int jjMoveStringLiteralDfa25_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa26_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(24, active0);
}
private int jjMoveStringLiteralDfa26_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa27_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(25, active0);
}
private int jjMoveStringLiteralDfa27_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa28_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(26, active0);
}
private int jjMoveStringLiteralDfa28_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa29_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(27, active0);
}
private int jjMoveStringLiteralDfa29_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa30_1(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_1(28, active0);
}
private int jjMoveStringLiteralDfa30_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(30, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_1(29, active0);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 46;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 39:
                  if (curChar == 62)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(17);
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(17);
                  else if (curChar == 61)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 33)
                     jjCheckNAdd(10);
                  else if (curChar == 38)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (curChar == 60)
                     jjCheckNAddTwoStates(7, 39);
                  else if (curChar == 61)
                     jjCheckNAdd(10);
                  else if (curChar == 62)
                     jjCheckNAdd(7);
                  else if (curChar == 33)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(41);
                  }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(41);
                  }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(41);
                  }
                  break;
               case 0:
                  if (curChar == 38 && kind > 48)
                     kind = 48;
                  break;
               case 2:
                  if (curChar == 38 && kind > 48)
                     kind = 48;
                  break;
               case 3:
                  if (curChar == 33 && kind > 49)
                     kind = 49;
                  break;
               case 7:
                  if (curChar == 61 && kind > 51)
                     kind = 51;
                  break;
               case 8:
                  if (curChar == 62)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if ((0x5000000000000000L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 10:
                  if (curChar == 61 && kind > 52)
                     kind = 52;
                  break;
               case 11:
                  if (curChar == 61)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 33)
                     jjCheckNAdd(10);
                  break;
               case 13:
                  if (curChar == 61 && kind > 54)
                     kind = 54;
                  break;
               case 14:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 61 && kind > 54)
                     kind = 54;
                  break;
               case 16:
                  if (curChar == 45)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(17);
                  break;
               case 38:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(7, 39);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  else if (curChar == 126)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  if (curChar == 67)
                     jjAddStates(3, 4);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(41);
                  }
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(41);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(41);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 3:
                  if (curChar == 126)
                     kind = 49;
                  break;
               case 4:
                  if (curChar == 124 && kind > 50)
                     kind = 50;
                  break;
               case 5:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 124 && kind > 50)
                     kind = 50;
                  break;
               case 18:
                  if (curChar == 67)
                     jjAddStates(3, 4);
                  break;
               case 19:
                  if (curChar == 101 && kind > 32)
                     kind = 32;
                  break;
               case 20:
               case 25:
                  if (curChar == 116)
                     jjCheckNAdd(19);
                  break;
               case 21:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(0, 2);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
               case 45:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 46 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000000L) != 0L)
            return 54;
         if ((active0 & 0x207ffef7f7f800L) != 0L)
         {
            jjmatchedKind = 67;
            return 61;
         }
         if ((active0 & 0x8080000L) != 0L)
         {
            jjmatchedKind = 67;
            return 39;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x7ffeb7ffe800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
            return 61;
         }
         if ((active0 & 0x20000040001000L) != 0L)
            return 61;
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
            return 51;
         }
         return -1;
      case 2:
         if ((active0 & 0x20000002000L) != 0L)
            return 61;
         if ((active0 & 0x7dfebfffc800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
            return 61;
         }
         return -1;
      case 3:
         if ((active0 & 0x70b2bffec800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
            return 61;
         }
         if ((active0 & 0xd4c00010000L) != 0L)
            return 61;
         return -1;
      case 4:
         if ((active0 & 0x1080100a8000L) != 0L)
            return 61;
         if ((active0 & 0x6032aff44800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
            return 61;
         }
         return -1;
      case 5:
         if ((active0 & 0x60322af44800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
            return 61;
         }
         if ((active0 & 0x85000000L) != 0L)
            return 61;
         return -1;
      case 6:
         if ((active0 & 0x1200004000L) != 0L)
            return 61;
         if ((active0 & 0x60202af40800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 6;
            return 61;
         }
         return -1;
      case 7:
         if ((active0 & 0x60202a740800L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 7;
            return 61;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x202a740000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 8;
            return 61;
         }
         if ((active0 & 0x600000000800L) != 0L)
            return 61;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x20040000L) != 0L)
            return 61;
         if ((active0 & 0x200a700000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 9;
            return 61;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0xa000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 10;
            }
            return 61;
         }
         if ((active0 & 0x2000700000L) != 0L)
            return 61;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 11;
            return 61;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0xa000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 12;
            return 61;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0xa000000L) != 0L)
            return 61;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 67;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 69);
      case 40:
         return jjStopAtPos(0, 59);
      case 41:
         return jjStopAtPos(0, 60);
      case 42:
         return jjStopAtPos(0, 57);
      case 43:
         return jjStopAtPos(0, 55);
      case 44:
         return jjStopAtPos(0, 62);
      case 45:
         return jjStartNfaWithStates_0(0, 56, 17);
      case 46:
         return jjStopAtPos(0, 61);
      case 47:
         return jjStopAtPos(0, 70);
      case 59:
         return jjStopAtPos(0, 58);
      case 60:
         return jjStartNfaWithStates_0(0, 47, 54);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x80700000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8080000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x202200000000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x14000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 94:
         return jjStopAtPos(0, 71);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1009000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000004000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x40000002000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x400040000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x60002000000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000010000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x401004000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 61);
         return jjMoveStringLiteralDfa2_0(active0, 0x206200000000L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 61);
         return jjMoveStringLiteralDfa2_0(active0, 0x408020800L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100820844000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 61);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x30080000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x830000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x4600000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100600040000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400008000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8801004000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000800L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000100000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 118:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 61);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 61);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x400002820000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 61);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 61);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 61);
         return jjMoveStringLiteralDfa4_0(active0, 0x4800L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 61);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 61);
         return jjMoveStringLiteralDfa4_0(active0, 0x100024000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x108000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1600000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 61);
         return jjMoveStringLiteralDfa4_0(active0, 0x3210000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2004000800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 61);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 61);
         return jjMoveStringLiteralDfa5_0(active0, 0x644000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400200000000L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 61);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1088000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200002800000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 61);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 61);
         break;
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x202000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200020100000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 61);
         return jjMoveStringLiteralDfa6_0(active0, 0x4800L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 61);
         return jjMoveStringLiteralDfa6_0(active0, 0x402000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000040000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 61);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 97:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 61);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000700000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000800L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 61);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x22040000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8700000L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 61);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x700000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 61);
         break;
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 61);
         break;
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2002000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 18, 61);
         break;
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 61);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0xf00000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 20, 61);
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0xc00000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 37, 61);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0xa000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x8800000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 27, 61);
         break;
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 25, 61);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(17, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa24_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa25_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa27_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa28_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa29_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa30_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(30, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(29, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if (curChar == 62)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(56);
                  }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(56);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(17);
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 45)
                     jjCheckNAdd(17);
                  else if (curChar == 61)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 33)
                     jjCheckNAdd(10);
                  else if (curChar == 38)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (curChar == 60)
                     jjCheckNAddTwoStates(7, 54);
                  else if (curChar == 61)
                     jjCheckNAdd(10);
                  else if (curChar == 62)
                     jjCheckNAdd(7);
                  else if (curChar == 33)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(56);
                  }
                  break;
               case 0:
                  if (curChar == 38 && kind > 48)
                     kind = 48;
                  break;
               case 2:
                  if (curChar == 38 && kind > 48)
                     kind = 48;
                  break;
               case 3:
                  if (curChar == 33 && kind > 49)
                     kind = 49;
                  break;
               case 7:
                  if (curChar == 61 && kind > 51)
                     kind = 51;
                  break;
               case 8:
                  if (curChar == 62)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if ((0x5000000000000000L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 10:
                  if (curChar == 61 && kind > 52)
                     kind = 52;
                  break;
               case 11:
                  if (curChar == 61)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 33)
                     jjCheckNAdd(10);
                  break;
               case 13:
                  if (curChar == 61 && kind > 54)
                     kind = 54;
                  break;
               case 14:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 61 && kind > 54)
                     kind = 54;
                  break;
               case 16:
                  if (curChar == 45)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(17);
                  break;
               case 19:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 22:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 24:
                  if (curChar == 39)
                     jjCheckNAddStates(5, 7);
                  break;
               case 25:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 28:
                  if (curChar == 39 && kind > 75)
                     kind = 75;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 31:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 53:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(7, 54);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 60;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(56);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(56);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(16, 18);
                  }
                  else if (curChar == 123)
                     jjCheckNAdd(22);
                  else if (curChar == 91)
                     jjCheckNAdd(19);
                  else if (curChar == 124)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  else if (curChar == 126)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  if (curChar == 67)
                     jjAddStates(19, 20);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(56);
                  }
                  break;
               case 3:
                  if (curChar == 126 && kind > 49)
                     kind = 49;
                  break;
               case 4:
                  if (curChar == 124 && kind > 50)
                     kind = 50;
                  break;
               case 5:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 124 && kind > 50)
                     kind = 50;
                  break;
               case 18:
                  if (curChar == 91)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 93 && kind > 73)
                     kind = 73;
                  break;
               case 21:
                  if (curChar == 123)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 125 && kind > 74)
                     kind = 74;
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(21, 23);
                  break;
               case 27:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 33:
                  if (curChar == 67)
                     jjAddStates(19, 20);
                  break;
               case 34:
                  if (curChar == 101 && kind > 32)
                     kind = 32;
                  break;
               case 35:
               case 40:
                  if (curChar == 116)
                     jjCheckNAdd(34);
                  break;
               case 36:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 41:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 52:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(16, 18);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
               case 60:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   41, 42, 43, 24, 37, 25, 26, 28, 19, 20, 22, 23, 25, 26, 30, 28, 
   56, 57, 58, 39, 52, 27, 29, 31, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\173", "\175", "\133", "\135", "\42", 
"\106\157\162\155\141\154\151\172\145", "\141\163", "\163\155\166", "\160\162\157\155\145\154\141", 
"\141\154\154\157\171", "\166\150\144\154", "\115\157\144\145\154", 
"\104\162\151\166\145\162\106\151\154\145", "\103\154\141\163\163", "\101\163\163\157\143\151\141\164\151\157\156", 
"\101\147\147\162\145\147\141\164\151\157\156", 
"\101\147\147\162\145\147\141\164\151\157\156\55\123\165\142\143\154\141\163\163\55\103\157\156\163\164\162\141\151\156\164", "\117\162\144\145\162\145\144\55\103\157\156\163\164\162\141\151\156\164", 
"\141\144\157\162\156\163", "\107\145\156\145\162\141\154\151\172\141\164\151\157\156", 
"\123\151\147\156\141\154", "\103\157\155\160\157\163\151\164\145\123\164\141\164\145", 
"\123\164\141\164\145", "\124\162\141\156\163\151\164\151\157\156", "\164\157", 
"\101\143\164\151\157\156", null, "\111\156\151\164\151\141\154", "\112\157\151\156", "\146\162\157\155", 
"\110\151\163\164\157\162\171", "\111\156\163\164\141\156\143\145\126\141\162", "\105\156\165\155", 
"\127\150\157\154\145", "\120\141\162\164", "\156\145\167", "\163\145\156\144", "\167\150\145\156", 
"\160\162\151\156\164", "\111\156\166\141\162\151\141\156\164", 
"\164\151\155\145\151\156\166\141\162", "\74", null, null, null, null, null, "\151\156", null, "\53", "\55", "\52", 
"\73", "\50", "\51", "\56", "\54", null, null, null, null, null, null, "\42", "\57", 
"\136", null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "IN_EXPRESSION_GRAMMAR",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0x7fffffffffffffc1L, 0xefcL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[61];
private final int[] jjstateSet = new int[122];
protected char curChar;
/** Constructor. */
public HILParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public HILParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
