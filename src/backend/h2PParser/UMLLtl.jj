/**
 * UMLLtl.jj
 *
 * Hydra LTL parser
 *
 * TODO: Is this used at all?  Not referenced from any current file. (acj 11/30/10)
 */

options {
  LOOKAHEAD=2;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  SANITY_CHECK = true;
//  FORCE_LA_CHECK = true;
  STATIC = false;
}

PARSER_BEGIN(UMLLtl1)

package backend.h2PParser;

import backend.h2PNodes.*;
import backend.h2PFoundation.*;

public class UMLLtl1 extends NodeUtilityClass {

  protected String fnCompare(String arg1, String op, String arg2) {
    if (op.equals("is")) {
      return arg1 + "==" + arg2;
    }
    if (op.equals("=")) {
      return arg1 + "==" + arg2;
    }
    return arg1 + op + arg2;
  }

  protected String fnInPredicate(String temp1) {
  	return "";
  }

  protected String fnSent(String temp1, String temp2) {
  	return "";
  }

  protected String fnGetVar(String temp1, String temp2) {
  	return "";
  }

}

PARSER_END(UMLLtl1)

SKIP:
{
 	" "
|	"\r"
|	"\t"
|   	"\n"
|   	"\f"
}

TOKEN:
{
   <OR: "|">
|  <AND: "&">
|  <NOT: "~">
|  <IMP: "->">
|  <COMPARE_OP: "=" | "!=" | ">=" | "<=" | ">" | "<" > 
|  <IN: "in">

|  <PLUS: "+">
|  <MINUS: "-">
|  <TIMES: "*">
|  <SEMICOLON: ";">
|  <LPARENS: "(">
|  <RPARENS: ")">
|  <PERIOD: ".">
|  <COMMA: ",">
|  <SLASH: "/">


|  <SENT: "sent">
|  <UNOP: <NOT> | "<>" | "[]" >
|  <EQV: "<->">

|   < #DIGIT: ["0" - "9"] >
|   < #LETTER: ["A"-"Z"] | ["a"-"z"] >
|  <NUM: <DIGIT> >
|  <ID: (<LETTER> | "_")(<LETTER> | "_" | <DIGIT>)*  >

}

String ltlform() throws ParseException:
{
  String retVal = "";
}
{
  retVal = imp()
  <SEMICOLON>
  { return retVal; }
}

String imp() throws ParseException:
{
  String retVal = "";
  String temp = "";
  Token t;
}
{
  temp = disjunct() { retVal += temp; }
  (
    (
        t = <IMP>
      | t = <EQV>
    )  { retVal += t.image; }
    temp = disjunct() { retVal += temp; }
  )*
  { return retVal; }
}

String disjunct() throws ParseException:
{
  String retVal = "";
  String temp = "";
  Token t;
}
{
  temp = conjunct() { retVal += temp; }
  (
    t = <OR> { retVal = "(" + retVal + t.image; } // check dual/single AND/OR
    temp = conjunct() { retVal += temp + ")"; }
  )*
  { return retVal; }
}

String conjunct() throws ParseException:
{
  String retVal = "";
  String temp = "";
  Token t;
}
{
  temp = term() { retVal += temp; }
  (
    t = <AND> { retVal = "(" + retVal + t.image; }
    temp = term() { retVal += temp + ")"; }
  )*
  { return retVal; }
}

String term() throws ParseException:
{
  String retVal = "";
  String temp = "";
  Token t;
}
{
   retVal = var() { return retVal; }
|  retVal = pred() { return retVal; }
|  (
     t = <UNOP> { retVal += t.image; }
     temp = term() { retVal += temp; } // this is right recursion, RIGHT!?
   )  { return retVal; }
|  (
     <LPARENS>  temp = imp() <RPARENS> 
   ) { return ("(" + temp + ")"); }
}

String pred() throws ParseException:
{
	Token t;
	String retVal = "";
	String temp1 = "";
	String temp2 = "";
	String temp3 = "";
}
{
	(
		temp1 = var()
		t = <COMPARE_OP> { temp2 = t.image; }
		t = <NUM> { temp3 = t.image; }
	)  { return fnCompare(temp1, temp2, temp3); }
|	(
		<IN>
		<LPARENS>
		temp1 = var()
		<RPARENS>
	)  { return fnInPredicate(temp1); }
|	(
		<SENT>
		<LPARENS>
		t = <ID> { temp1 = t.image; }
		<PERIOD>
		t = <ID> { temp2 = t.image; }
		<RPARENS>
	)  { return fnSent(temp1, temp2); }
|	retVal = function() { return retVal; }
}


String function() throws ParseException:
{
	Token t;
	String funcID = "";
	String parmlistStr = "";
}
{
	t = <ID> { funcID = t.image; }
	<LPARENS>
	parmlistStr = parmlist()
	<RPARENS>
	{ return (funcID + "(" + parmlistStr + ")"); }
}

String parmlist() throws ParseException:
{
	String retVal = "";
	String temp = "";
}
{
	temp = parm() { retVal += temp; }
	(
		<COMMA>
		temp = parm() { retVal += temp; }
	)*
	{ return retVal; }
}

String parm() throws ParseException:
{
	Token t;
	String temp;
}
{
	temp = var() { return temp; }
|	t = <NUM> { return t.image; }
|	temp = pred() { return temp; }
}

String var() throws ParseException:
{
	Token t;
	String temp1;
	String temp2;
}
{
	(
		t = <ID> { temp1 = t.image; }
		<PERIOD>
		t = <ID> { temp2 = t.image; }
	)
	{ return fnGetVar(temp1, temp2); }
}
