/* Generated By:JavaCC: Do not edit this line. UMLExpr.java */
package backend.h2PParser;

import java.io.*;
import java.util.Set;
import java.util.HashSet;
import java.util.Vector;
import java.util.Map;
import backend.h2PNodes.*;
import backend.h2PVisitors.*;
import backend.h2PFoundation.*;

public class UMLExpr extends NodeUtilityClass implements UMLExprConstants {
  public String finalStr = "";
  protected aNode classRef;
  protected String currentClass;
  protected AcceptReturnType globalOutputs;
  protected PromelaInPredicateVisitor pinpv;
  protected Reader dataStream;
  protected String lhsHint = "";
  protected Set<String> reservedWords;
  protected Set<Symbol> referencedSymbols;

  public UMLExpr(AcceptReturnType theGlobalOutputs, PromelaInPredicateVisitor THEpinpv) {
        this(new StringReader("This is a test string"));
        globalOutputs = theGlobalOutputs;
        pinpv = THEpinpv;
        String[] reservedWordArray = new String[] {
                "active", "assert", "atomic", "bit",
                "bool", "break", "byte", "chan", "d_step", "D_proctype", "do", "else",
                "empty", "enabled", "fi", "full", "goto", "hidden", "if", "init",
                "int", "len", "mtype", "nempty", "never", "nfull", "od", "of",
                "pc_value", "printf", "priority", "proctype", "provided", "run",
                "short", "skip", "timeout", "typedef", "unless", "unsigned",
                "xr", "xs" };
        reservedWords = new HashSet<String>();
        referencedSymbols = new HashSet<Symbol>();
        for (String word : reservedWordArray) {
                reservedWords.add(word);
        }
  }

  public String parse (aNode theClassRef, String expression) {
         classRef = theClassRef;
         ClassNode thisClassRef = (ClassNode) searchUpForDest (classRef, "ClassNode");
         currentClass = thisClassRef.getID();
         String retStr = "";
         dataStream = new StringReader (expression);
         ReInit(dataStream);
         try {
                retStr = stmt();
         }  catch (ParseException pe) {
        System.err.println("\u005cnThe error occurred in class `" + currentClass + "' while parsing this: \u005cn    " + expression + "\u005cn");
        if (pe.getMessage() != null) {
                System.err.println(pe.getMessage());
        }
        System.exit(-1);
         }

         return retStr;
  }

  /**
   * Mangles instance variable names so that they reference the global typedef
   * that holds member variables and their values for each class.
   *
   * For example, the class Foo will have a typedef called Foo_T and a default
   * instance named Foo_V.
   *
   * The "lhsHint" parameter provides a suggestion for the containing type when
   * the variable is of an enumerated type.  The suggestion is the name of the
   * variable being assigned to, compared with, and so on.  In the assignment
   * statement "InstanceVar FooType fooVar := OFF", the suggestion would be
   * "FooType".  This helps the parser to resolve "OFF" to "FooType.OFF".
   */
  public String InstVar (String nameToCheck) throws ParseException {
        String className;
        String varName = nameToCheck;
        if (varName.contains(".")) {
                int dotPos = varName.indexOf(".");
                className = varName.substring(0, dotPos);
                varName = varName.substring(dotPos+1);
        } else {
                className = currentClass;
        }

        // At this point, the class name and attribute/identifier name are broken
        // into two parts: className and varName
        //
        // Perform a boilerplate check against the list of reserved words in
        // Promela
        if (reservedWords.contains(varName)) {
                System.err.println("Error: reserved word `" + varName + "' used as " +
                        "a variable.");
                throw new ParseException();
        }

        // Determine whether this is a timer variable
        String entities [] = globalOutputs.getStrSplit("TimerList");
        for (int i = 0; i < entities.length; i++) {
                if (entities[i].equals(varName)) {
                        className = "Timer";
                }
        }

        // First, check the class name.  There are three cases here:
        //
        // (1) The class name refers to a real class.
        // (2) The class name refers to an *instance* of a class that is stored
        //     as an attribute in another class.
        // (3) The class name refers to an enumerated type.
        if (!SymbolTable.symbolExists(className, Symbol.SymbolType.CLASS)) {
                // The class name does not refer to a valid class.  Is it an attribute?
                String containingClassName = currentClass;
                String instanceName = className;
                if (!SymbolTable.symbolExistsInClass(instanceName, containingClassName) &&
                        !SymbolTable.symbolExistsInEnum(varName, className)) {
                        System.err.println("Error: class `" + className + "' " +
                                "does not exist and class `" + containingClassName +
                                "' has no member named `" + instanceName + "'.");
                        throw new ParseException();
                }
        }

        // Next, work out how to format/mangle the name.

        // Is the variable name a valid attribute for the class?
        //
        // There are two cases here:
        // (1) The class name refers to a real class.
        // (2) The class name refers to an *instance* of a class.  In this case,
        //	   we need to dereference the instance to find its class type.

        // Case (1)
        if (SymbolTable.symbolExistsInClass(varName, className)) {
                String fullVarName = className + "." + varName;
                referencedSymbols.add(SymbolTable.getSymbol(fullVarName));
                return fullVarName;
        } else { // Case (2)
                String containingClassName = currentClass;
                String instName = className;
                if (SymbolTable.symbolExistsInClass(instName, containingClassName)) {
                        Symbol instanceSym = SymbolTable.getSymbol(
                                instName, containingClassName, Symbol.SymbolType.INSTVAR);
                        String instClass = instanceSym.getDataType();
                        if (SymbolTable.symbolExistsInClass(varName, instClass)) {
                                Symbol instanceTypeSym = SymbolTable.getSymbol(instClass);
                                // Tally this instance in the class's symbol
                        instanceTypeSym.addClassInstance(instanceSym);
                        referencedSymbols.add(instanceSym);
                                return instName + "." + varName;
                        } else {
                                System.err.println("Error: class `" + instClass +
                                        "' (the class type of member `" + instName +
                                        "' in class `" + containingClassName +
                                        "') has no member named `" + varName + "'.");
                                throw new ParseException();
                        }
                } // else: it's probably an enumerated type
        }

        // Is the variable an enumerated type? 
        if (SymbolTable.symbolExistsInEnum(varName, className)) {
                return className + "__" + varName;
        }

        // Check whether the variable is an enumerated type
        if (!lhsHint.equals("")) {
                String hintOwningClass = "";
                String hintAttrib = "";
                if (lhsHint.contains(".")) {
                        int dotPos = lhsHint.indexOf(".");
                        hintOwningClass = lhsHint.substring(0, dotPos);
                        hintAttrib = lhsHint.substring(dotPos + 1);
                        // If the LHS refers to an instance of a class that is an attribute
                        // in another class, then we need to revise it to refer to the
                        // class type of the attribute.
                        //
                        // In this case, hintOwningClass is actually the name of an attribute
                        if (SymbolTable.symbolExistsInClass(hintOwningClass, className)) {
                                String instType = SymbolTable.getDataTypeOfAttribute(
                                        hintOwningClass, className);
                                hintOwningClass = instType;
                        }
                } else {
                        hintOwningClass = className;
                        hintAttrib = lhsHint;
                }

                // Clear the lhsHint
                lhsHint = "";

                // If this enumerated type is fully resolved, then just check it
                // for validity and replace the '.' with our '__' separator
                if (!className.equals("") &&
                        SymbolTable.symbolExistsInEnum(varName, className)) {

                        return className + "__" + varName;
                }

                // Otherwise, try to determine the type of the variable on the left-hand side
                //
                // For example, in the assignment "doorStatus = AJAR", we need to
                // determine the type of doorStatus in order to resolve the type of
                // AJAR appropriately.
                if (SymbolTable.symbolExistsInClass(hintAttrib, hintOwningClass)) {
                        Symbol s = SymbolTable.getSymbol(hintAttrib, hintOwningClass, Symbol.SymbolType.INSTVAR);
                        String hintType = s.getDataType();
                        if (!SymbolTable.symbolExistsInEnum(varName, hintType)) {
                                System.err.println("Error: no value `" + varName + "' exists in enumerated type `" + hintType + "'");
                                throw new ParseException();
                        } else {
                                return hintType + "__" + varName;
                        }
                }
        }

        // Search for a class in which this variable is defined.
        String hintClass = SymbolTable.searchForSymbol(varName);
        if (!hintClass.equals("")) {
                // The symbol *is* defined, but not in this class. Give a hint.
                System.err.println("Error: class `" + className +
                        "' has no member named `" + varName + "'.  " +
                        "Did you mean " + hintClass + "." + varName + "?");
                throw new ParseException();
        }

        System.err.println("Unhandled name resolution: " + varName);
        Symbol varSym = SymbolTable.getSymbol(varName);
        if (varSym != null) {
                referencedSymbols.add(varSym);
        }
        return varName;
  }

  public String INPredicate(String predtarg) {
        String className = currentClass;
        aNode myParent = classRef.getParent().getParent().getParent();
        String parentName = myParent.getID();

        /* TODO implement:
   	if (!Yacc->LkupSym($target)) 
        {
            die "In class $classname, $myparent->{object} $parentname, state $target undefined in IN predicate."
    }
   	*/
        ClassBodyNode thisClassBodyRef = (ClassBodyNode) searchUpForDest (classRef, "ClassBodyNode");
        pinpv.INTarget(thisClassBodyRef, predtarg);

        return className + "INPredicate_V.st_" + predtarg;
  }

  public String Assignment(String assignto, String assignfrom) throws ParseException {
        String newleft = InstVar(assignto);
        return newleft + "=" + assignfrom + ";";
  }

  public Set<Symbol> getReferencedSymbols() {
        return referencedSymbols;
  }

  final public String stmt() throws ParseException, ParseException {
    if (jj_2_1(2)) {
      finalStr = assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        finalStr = guard();
        break;
      case NOT:
      case IN:
      case MINUS:
      case LPARENS:
      case NUM:
      case TRUTH:
      case ID:
      case FULLID:
        finalStr = parameterList();
        break;
      case WHEN:
        finalStr = whenclause();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return finalStr;}
    throw new Error("Missing return statement in function");
  }

  final public String assignment() throws ParseException, ParseException {
        Token t;
        String temp1, temp2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                           temp1 = t.image; lhsHint = t.image;
      break;
    case FULLID:
      t = jj_consume_token(FULLID);
                               temp1 = t.image; lhsHint = t.image;
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ASSGNOP);
    temp2 = expression();
          {if (true) return Assignment(temp1, temp2);}
    throw new Error("Missing return statement in function");
  }

  final public String function() throws ParseException, ParseException {
        Token t;
        String funcID = "";
        String parameterListStr = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case FULLID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
                                   funcID = InstVar(t.image);
        break;
      case FULLID:
        t = jj_consume_token(FULLID);
                                       funcID = InstVar(t.image);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPARENS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case IN:
      case MINUS:
      case LPARENS:
      case NUM:
      case TRUTH:
      case ID:
      case FULLID:
        parameterListStr = parameterList();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RPARENS);
                String cleanFuncID = funcID.replace("_V.", ".");
                int dotPos = cleanFuncID.indexOf(".");
                String className = cleanFuncID.substring(0, dotPos);
                String signalName = cleanFuncID.substring(dotPos + 1);
                // If the class name refers to an instance of another class, then we
                // need to look up the name of the other class.
                if (SymbolTable.symbolExistsInClass(className, currentClass)) {
                        className = SymbolTable.getDataTypeOfAttribute(className,
                                currentClass);
                }
                if (!SymbolTable.checkSymbolType(signalName, className, Symbol.SymbolType.SIGNAL)) {
                        System.err.println("Error: " + signalName + " being called as an " +
                                "operation.  Should this be an attribute reference?");
                        {if (true) throw new ParseException();}
                } else {
                        {if (true) return (funcID + "(" + parameterListStr + ")");}
                }
      break;
    case IN:
      jj_consume_token(IN);
      jj_consume_token(LPARENS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
                                   funcID = InstVar(t.image);
        break;
      case FULLID:
        t = jj_consume_token(FULLID);
                                       funcID = InstVar(t.image);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPARENS);
          {if (true) return INPredicate(funcID);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String parameterList() throws ParseException, ParseException {
        String retVal = "";
        String temp = "";
    temp = parm();
                        retVal += temp;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      temp = parm();
                                retVal += temp;
    }
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String parm() throws ParseException, ParseException {
        Token t;
        String temp;
    temp = expression();
                              {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public String guard() throws ParseException, ParseException {
  String retVal = "";
  Token t;
    jj_consume_token(LBRACKET);
    retVal = expression();
    jj_consume_token(RBRACKET);
                lhsHint = "";
                {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String whenclause() throws ParseException, ParseException {
        String retVal = "";
    jj_consume_token(WHEN);
    jj_consume_token(LPARENS);
    retVal = expression();
    jj_consume_token(RPARENS);
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String expression() throws ParseException, ParseException {
        String retVal = "";
    retVal = logicalExpression();
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String logicalExpression() throws ParseException, ParseException {
        String retVal = "";
        String temp = "";
    retVal = booleanExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      temp = booleanExpression();
                                             retVal = retVal + "||" + temp;
    }
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String booleanExpression() throws ParseException, ParseException {
        String retVal = "";
        String temp = "";
    retVal = equalityExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      temp = equalityExpression();
                                              retVal = retVal + "&&" + temp;
    }
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String equalityExpression() throws ParseException, ParseException {
        Token t;
        String temp1 = "";
        String temp2 = "";
        String temp3 = "";
    temp1 = relationalExpression();
                                         lhsHint = temp1;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALITY_OP:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(EQUALITY_OP);
                                    temp2 = t.image.replace("<>", "!=");
      temp3 = relationalExpression();
    }
          {if (true) return temp1 + temp2 + temp3;}
    throw new Error("Missing return statement in function");
  }

  final public String relationalExpression() throws ParseException, ParseException {
        Token t;
        String temp1 = "";
        String temp2 = "";
        String temp3 = "";
    temp1 = additiveExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPARE_OP:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(COMPARE_OP);
                                   temp2 = t.image;
      temp3 = additiveExpression();
    }
          {if (true) return temp1 + temp2 + temp3;}
    throw new Error("Missing return statement in function");
  }

  final public String additiveExpression() throws ParseException, ParseException {
        Token t;
        String temp1 = "";
        String temp2 = "";
        String temp3 = "";
    temp1 = multiplicativeExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
                                     temp2 = t.image;
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
                                      temp2 = t.image;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      temp3 = multiplicativeExpression();
    }
          {if (true) return temp1 + temp2 + temp3;}
    throw new Error("Missing return statement in function");
  }

  final public String multiplicativeExpression() throws ParseException, ParseException {
        Token t;
        String temp1 = "";
        String temp2 = "";
        String temp3 = "";
    temp1 = unaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case SLASH:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        t = jj_consume_token(TIMES);
                                      temp2 = t.image;
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
                                      temp2 = t.image;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      temp3 = unaryExpression();
    }
          {if (true) return temp1 + temp2 + temp3;}
    throw new Error("Missing return statement in function");
  }

  final public String unaryExpression() throws ParseException, ParseException {
        Token t;
        String temp = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
    case LPARENS:
    case NUM:
    case TRUTH:
    case ID:
    case FULLID:
      temp = primaryExpression();
                                             {if (true) return temp;}
      break;
    case NOT:
      jj_consume_token(NOT);
      temp = primaryExpression();
                                             {if (true) return "!" + temp;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      temp = primaryExpression();
                                              {if (true) return "-" + temp;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String primaryExpression() throws ParseException, ParseException {
        Token t;
        String temp = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARENS:
      jj_consume_token(LPARENS);
      temp = logicalExpression();
      jj_consume_token(RPARENS);
      break;
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_2(2)) {
        temp = function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUTH:
          t = jj_consume_token(TRUTH);
                        if (t.image.toUpperCase().equals("TRUE")) {
                                {if (true) return "1";}
                        } else {
                                {if (true) return "0";}
                        }
          break;
        case NUM:
        case ID:
        case FULLID:
          temp = numid();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public String numid() throws ParseException, ParseException {
        Token t;
        String temp = "";
        boolean isnot = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                           {if (true) return InstVar(t.image);}
      break;
    case FULLID:
      t = jj_consume_token(FULLID);
                               {if (true) return InstVar(t.image);}
      break;
    case NUM:
      t = jj_consume_token(NUM);
                            {if (true) return t.image;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(FULLID)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    if (jj_scan_token(ASSGNOP)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(LPARENS)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    if (jj_scan_token(LPARENS)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(FULLID)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public UMLExprTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc2126100,0x0,0x0,0xc0122100,0x0,0x2000,0x800000,0x40,0x80,0x800,0x400,0x30000,0x30000,0x1040000,0x1040000,0xc0122100,0x100000,0xc0000000,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x3,0x3,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public UMLExpr(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public UMLExpr(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UMLExprTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public UMLExpr(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new UMLExprTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public UMLExpr(UMLExprTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(UMLExprTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
