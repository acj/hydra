/* Generated By:JavaCC: Do not edit this line. HILParserConstants.java */
package backend.h2PParser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HILParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LCURLY = 6;
  /** RegularExpression Id. */
  int RCURLY = 7;
  /** RegularExpression Id. */
  int LBRACKET = 8;
  /** RegularExpression Id. */
  int RBRACKET = 9;
  /** RegularExpression Id. */
  int DQUOTE = 10;
  /** RegularExpression Id. */
  int FORMALIZE = 11;
  /** RegularExpression Id. */
  int AS = 12;
  /** RegularExpression Id. */
  int SMV = 13;
  /** RegularExpression Id. */
  int PROMELA = 14;
  /** RegularExpression Id. */
  int ALLOY = 15;
  /** RegularExpression Id. */
  int VHDL = 16;
  /** RegularExpression Id. */
  int MODEL = 17;
  /** RegularExpression Id. */
  int DRIVERFILE = 18;
  /** RegularExpression Id. */
  int CLASS = 19;
  /** RegularExpression Id. */
  int ASSOCIATION = 20;
  /** RegularExpression Id. */
  int AGGREGATION = 21;
  /** RegularExpression Id. */
  int AGSUBCONST = 22;
  /** RegularExpression Id. */
  int ORDCONST = 23;
  /** RegularExpression Id. */
  int ADORNS = 24;
  /** RegularExpression Id. */
  int GENERALIZATION = 25;
  /** RegularExpression Id. */
  int SIGNAL = 26;
  /** RegularExpression Id. */
  int CSTATE = 27;
  /** RegularExpression Id. */
  int STATE = 28;
  /** RegularExpression Id. */
  int TRANS = 29;
  /** RegularExpression Id. */
  int TO = 30;
  /** RegularExpression Id. */
  int ACTION = 31;
  /** RegularExpression Id. */
  int CCSTATE = 32;
  /** RegularExpression Id. */
  int INIT = 33;
  /** RegularExpression Id. */
  int JOIN = 34;
  /** RegularExpression Id. */
  int FROM = 35;
  /** RegularExpression Id. */
  int HISTORY = 36;
  /** RegularExpression Id. */
  int INSTVAR = 37;
  /** RegularExpression Id. */
  int ENUM = 38;
  /** RegularExpression Id. */
  int WHOLE = 39;
  /** RegularExpression Id. */
  int PART = 40;
  /** RegularExpression Id. */
  int NEW = 41;
  /** RegularExpression Id. */
  int SEND = 42;
  /** RegularExpression Id. */
  int WHEN = 43;
  /** RegularExpression Id. */
  int PRINT = 44;
  /** RegularExpression Id. */
  int INVARIANT = 45;
  /** RegularExpression Id. */
  int INVTYPENAME = 46;
  /** RegularExpression Id. */
  int INHERITS = 47;
  /** RegularExpression Id. */
  int AND = 48;
  /** RegularExpression Id. */
  int NOT = 49;
  /** RegularExpression Id. */
  int OR = 50;
  /** RegularExpression Id. */
  int COMPARE_OP = 51;
  /** RegularExpression Id. */
  int EQUALITY_OP = 52;
  /** RegularExpression Id. */
  int IN = 53;
  /** RegularExpression Id. */
  int ASSIGNOP = 54;
  /** RegularExpression Id. */
  int PLUS = 55;
  /** RegularExpression Id. */
  int MINUS = 56;
  /** RegularExpression Id. */
  int TIMES = 57;
  /** RegularExpression Id. */
  int SEMICOLON = 58;
  /** RegularExpression Id. */
  int LPARENS = 59;
  /** RegularExpression Id. */
  int RPARENS = 60;
  /** RegularExpression Id. */
  int PERIOD = 61;
  /** RegularExpression Id. */
  int COMMA = 62;
  /** RegularExpression Id. */
  int CONSTANT = 63;
  /** RegularExpression Id. */
  int DIGIT = 64;
  /** RegularExpression Id. */
  int LETTER = 65;
  /** RegularExpression Id. */
  int NUM = 66;
  /** RegularExpression Id. */
  int ID = 67;
  /** RegularExpression Id. */
  int FULLID = 68;
  /** RegularExpression Id. */
  int ENDQUOTE = 69;
  /** RegularExpression Id. */
  int SLASH = 70;
  /** RegularExpression Id. */
  int CARET = 71;
  /** RegularExpression Id. */
  int MINIEXPRESSION = 72;
  /** RegularExpression Id. */
  int EXPRESSION = 73;
  /** RegularExpression Id. */
  int INVARIANTEXPRESSION = 74;
  /** RegularExpression Id. */
  int PRINTEXPRESSION = 75;

  /** Lexical state. */
  int IN_EXPRESSION_GRAMMAR = 0;
  /** Lexical state. */
  int DEFAULT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"\\\"\"",
    "\"Formalize\"",
    "\"as\"",
    "\"smv\"",
    "\"promela\"",
    "\"alloy\"",
    "\"vhdl\"",
    "\"Model\"",
    "\"DriverFile\"",
    "\"Class\"",
    "\"Association\"",
    "\"Aggregation\"",
    "\"Aggregation-Subclass-Constraint\"",
    "\"Ordered-Constraint\"",
    "\"adorns\"",
    "\"Generalization\"",
    "\"Signal\"",
    "\"CompositeState\"",
    "\"State\"",
    "\"Transition\"",
    "\"to\"",
    "\"Action\"",
    "<CCSTATE>",
    "\"Initial\"",
    "\"Join\"",
    "\"from\"",
    "\"History\"",
    "\"InstanceVar\"",
    "\"Enum\"",
    "\"Whole\"",
    "\"Part\"",
    "\"new\"",
    "\"send\"",
    "\"when\"",
    "\"print\"",
    "\"Invariant\"",
    "\"timeinvar\"",
    "\"<\"",
    "<AND>",
    "<NOT>",
    "<OR>",
    "<COMPARE_OP>",
    "<EQUALITY_OP>",
    "\"in\"",
    "<ASSIGNOP>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "<CONSTANT>",
    "<DIGIT>",
    "<LETTER>",
    "<NUM>",
    "<ID>",
    "<FULLID>",
    "\"\\\"\"",
    "\"/\"",
    "\"^\"",
    "<MINIEXPRESSION>",
    "<EXPRESSION>",
    "<INVARIANTEXPRESSION>",
    "<PRINTEXPRESSION>",
  };

}
