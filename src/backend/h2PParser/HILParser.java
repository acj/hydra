/* Generated By:JavaCC: Do not edit this line. HILParser.java */
package backend.h2PParser;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import backend.h2PNodes.*;
import backend.h2PFoundation.*;
import backend.h2PFoundation.Symbol.SymbolType;

public class HILParser extends NodeUtilityClass implements HILParserConstants {
    protected WorldUtilNode rootNode;
    protected String currentClass;
    protected Stack<aNode> compositeStates; // Track nested CS nodes
    protected Map<String, String> classInstances;
    protected Map<String, HashSet<String>> classInheritance;

    public HILParser (WorldUtilNode theRootNode) {
        setRootNode (theRootNode);
    }

    public void setRootNode (WorldUtilNode theRootNode) {
        rootNode = theRootNode;
    }

    public void parse () {
        try {
                compositeStates = new Stack<aNode>();
                classInstances = new HashMap<String, String>();
                classInheritance = new HashMap<String, HashSet<String>>();
                spec();

            // Process generalization/inheritance relationships.  This must
            // take place after parsing so that all classes have been
            // accounted for.
            for (String subClassName : classInheritance.keySet()) {
                ClassNode currentClassNode = findClassNodeByID(rootNode, subClassName);
                assert(currentClassNode != null);

                HashSet<String> superClassNames = classInheritance.get(subClassName);
                for (String superClass : superClassNames) {
                        ClassNode superClassNode = findClassNodeByID(rootNode, superClass);
                        currentClassNode.addSuperClass(superClassNode);
                }
            }

            for (String subClassName : classInheritance.keySet()) {
                ClassNode currentClassNode = findClassNodeByID(rootNode, subClassName);
                assert(currentClassNode != null);
                try {
                        currentClassNode.inheritFromSuperClasses();
                } catch (Exception e) {
                        throw new ParseException();
                    }
            }

            // Process class instances.  classInstances maps the full name of
            // the symbol to the name of the class of which it is an instance.
                for (String key : classInstances.keySet()) {
                                Symbol instanceSym = SymbolTable.getSymbol(key);
                                Symbol typeSym = SymbolTable.getSymbol(classInstances.get(key));

                                // Tally this instance in the class's symbol
                                if (typeSym != null &&
                                                typeSym.getType().equals(SymbolType.CLASS)) {
                                typeSym.addClassInstance(instanceSym);
                        }
                }
            } catch (ParseException pe) {
                if (currentClass != null) {
                        System.err.println("\u005cnThe error occurred in class `" + currentClass + "'.\u005cn");
                }
                if (pe.getMessage() != null) {
                        System.err.println("The misbehaving line is as follows:\u005cn\u005cn" +
                                pe.getMessage());
                }
                System.exit(-1);
            }
    }

    // Dummy method to allow us to use the same expression rules from
    // UMLExpr.
    public String InstVar (String varname) {
        return varname;
    }

  final public void spec() throws ParseException, ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORMALIZE:
      jj_consume_token(FORMALIZE);
      jj_consume_token(AS);
      language();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    model();
  }

  final public void language() throws ParseException, ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROMELA:
      jj_consume_token(PROMELA);
      break;
    case SMV:
      jj_consume_token(SMV);
      break;
    case ALLOY:
      jj_consume_token(ALLOY);
      break;
    case VHDL:
      jj_consume_token(VHDL);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void model() throws ParseException, ParseException {
  ModelNode tNode;
  ModelBodyNode childNode;
  Token t;
  String ModelID = "";
    jj_consume_token(MODEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                      ModelID = t.image;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(LCURLY);
    childNode = modelbody();
    jj_consume_token(RCURLY);
    tNode = new ModelNode (ModelID);
    rootNode.addChildToNode(tNode, childNode);
    rootNode.addChild(tNode); // add the head node to the root.

  }

  final public ModelBodyNode modelbody() throws ParseException, ParseException {
  ModelBodyNode tNode = new ModelBodyNode ();
  aNode childNode;
    label_1:
    while (true) {
      childNode = modelstmt();
            rootNode.addChildToNode(tNode, childNode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DRIVERFILE:
      case CLASS:
      case ASSOCIATION:
      case AGGREGATION:
      case ENUM:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
          {if (true) return tNode;}
    throw new Error("Missing return statement in function");
  }

  final public aNode modelstmt() throws ParseException, ParseException {
  Token t;
  String tID = "";
  ClassNode cNode = null;
  ClassBodyNode cbNode = null;
  EnumNode enumNode;
  String superName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DRIVERFILE:
      jj_consume_token(DRIVERFILE);
      t = jj_consume_token(ID);
      jj_consume_token(SEMICOLON);
                           tID = t.image;
    {if (true) return new DriverFileNode(tID);}
      break;
    case CLASS:
      jj_consume_token(CLASS);
      t = jj_consume_token(ID);
               tID = t.image; currentClass = tID;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INHERITS:
        jj_consume_token(INHERITS);
        t = jj_consume_token(ID);
                superName = t.image;
                if (!classInheritance.containsKey(currentClass)) {
                        HashSet<String> inheritsSet = new HashSet<String>();
                        inheritsSet.add(superName);
                        classInheritance.put(currentClass, inheritsSet);
                        } else {
                classInheritance.get(currentClass).add(superName);
                }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          t = jj_consume_token(ID);
        }
                if (!classInheritance.containsKey(currentClass)) {
                        HashSet<String> inheritsSet = new HashSet<String>();
                        inheritsSet.add(superName);
                        classInheritance.put(currentClass, inheritsSet);
                        } else {
                classInheritance.get(currentClass).add(superName);
                }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(LCURLY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGSUBCONST:
      case ORDCONST:
      case SIGNAL:
      case CSTATE:
      case STATE:
      case CCSTATE:
      case INIT:
      case JOIN:
      case INSTVAR:
        cbNode = classbody(currentClass);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RCURLY);
        cNode = new ClassNode(currentClass);
        {if (true) return rootNode.addChildToNode(cNode, cbNode);}
      break;
    case ASSOCIATION:
      jj_consume_token(ASSOCIATION);
      jj_consume_token(ID);
      jj_consume_token(LCURLY);
      assocbody();
      jj_consume_token(RCURLY);
      {if (true) return null;}
      break;
    case AGGREGATION:
      jj_consume_token(AGGREGATION);
      jj_consume_token(ID);
      jj_consume_token(LCURLY);
      agbody();
      jj_consume_token(RCURLY);
      {if (true) return null;}
      break;
    case ENUM:
      jj_consume_token(ENUM);
      t = jj_consume_token(ID);
                   enumNode = new EnumNode(t.image);
      jj_consume_token(LPARENS);
      t = jj_consume_token(ID);
                   enumNode.addEnum(t.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ID);
                           enumNode.addEnum(t.image);
      }

      jj_consume_token(RPARENS);
      jj_consume_token(SEMICOLON);
    {if (true) return enumNode;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ClassBodyNode classbody(String className) throws ParseException, ParseException {
  ClassBodyNode tNode = new ClassBodyNode ();
  aNode childNode;
    label_4:
    while (true) {
      childNode = classstmt(className);
                rootNode.addChildToNode(tNode, childNode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGSUBCONST:
      case ORDCONST:
      case SIGNAL:
      case CSTATE:
      case STATE:
      case CCSTATE:
      case INIT:
      case JOIN:
      case INSTVAR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
    }
          {if (true) return tNode;}
    throw new Error("Missing return statement in function");
  }

  final public aNode classstmt(String className) throws ParseException, ParseException {
        aNode tNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGNAL:
      tNode = signal(className);
                                    {if (true) return tNode;}
      break;
    case CSTATE:
      tNode = cstate();
                           {if (true) return tNode;}
      break;
    case CCSTATE:
      tNode = ccstate();
                            {if (true) return tNode;}
      break;
    case INIT:
      tNode = init();
                         {if (true) return tNode;}
      break;
    case JOIN:
      tNode = join();
                         {if (true) return tNode;}
      break;
    case STATE:
      tNode = state();
                          {if (true) return tNode;}
      break;
    case INSTVAR:
      tNode = instvar(className);
                                     {if (true) return tNode;}
      break;
    case AGSUBCONST:
      jj_consume_token(AGSUBCONST);
      jj_consume_token(ADORNS);
      jj_consume_token(ID);
      jj_consume_token(LCURLY);
      agsubbody();
      jj_consume_token(RCURLY);
           {if (true) return null;}
      break;
    case ORDCONST:
      ordconst();
                     {if (true) return null;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public aNode signal(String className) throws ParseException, ParseException {
        Token t;
        String signame = "";
        String sigtype = "";
    jj_consume_token(SIGNAL);
    t = jj_consume_token(ID);
             signame = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARENS:
      jj_consume_token(LPARENS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
               sigtype = t.image;
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(RPARENS);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new SignalNode(signame, sigtype, className);}
    throw new Error("Missing return statement in function");
  }

  final public aNode cstate() throws ParseException, ParseException {
        Token t;
        String tID = "";
        aNode csBody = null;
        CompositeStateNode tNode;
    jj_consume_token(CSTATE);
    t = jj_consume_token(ID);
                   tID = t.image; tNode = new CompositeStateNode(tID); compositeStates.push(tNode);
    jj_consume_token(LCURLY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CSTATE:
    case STATE:
    case TRANS:
    case ACTION:
    case CCSTATE:
    case INIT:
    case JOIN:
    case HISTORY:
    case INVARIANT:
      csBody = cstatebody();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(RCURLY);
                compositeStates.pop();
                {if (true) return rootNode.addChildToNode (tNode, csBody);}
    throw new Error("Missing return statement in function");
  }

  final public aNode cstatebody() throws ParseException, ParseException {
        CompositeStateBodyNode tNode = new CompositeStateBodyNode();
        aNode childNode;
    label_5:
    while (true) {
      childNode = cstatestmt();
                  rootNode.addChildToNode(tNode, childNode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CSTATE:
      case STATE:
      case TRANS:
      case ACTION:
      case CCSTATE:
      case INIT:
      case JOIN:
      case HISTORY:
      case INVARIANT:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
    }
          {if (true) return tNode;}
    throw new Error("Missing return statement in function");
  }

  final public aNode cstatestmt() throws ParseException, ParseException {
        aNode tNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATE:
      tNode = state();
                          {if (true) return tNode;}
      break;
    case INIT:
      tNode = init();
                         {if (true) return tNode;}
      break;
    case CSTATE:
      tNode = cstate();
                           {if (true) return tNode;}
      break;
    case JOIN:
      tNode = join();
                         {if (true) return tNode;}
      break;
    case HISTORY:
      tNode = history();
                            {if (true) return tNode;}
      break;
    case CCSTATE:
      tNode = ccstate();
                            {if (true) return tNode;}
      break;
    case TRANS:
      tNode = transition();
                               {if (true) return tNode;}
      break;
    case ACTION:
    case INVARIANT:
      tNode = actofstate();
                               {if (true) return tNode;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public aNode state() throws ParseException, ParseException {
        StateNode tNode;
        Token t;
        String tID = "";
        aNode childNode = null;
    jj_consume_token(STATE);
    t = jj_consume_token(ID);
                   tID = t.image;
    jj_consume_token(LCURLY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANS:
    case ACTION:
    case INVARIANT:
      childNode = statebody();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RCURLY);
                tNode = new StateNode(tID);
                if (!compositeStates.empty()) {
                        aNode parentCS = compositeStates.peek();
                        assert(parentCS.getType().equals("CompositeStateNode") ||
                                parentCS.getType().equals("ConcurrentCompositeNode"));
                        Symbol parentSym;
                        if (parentCS.getType() == "CompositeStateNode") {
                                parentSym = ((CompositeStateNode)parentCS).getSymbol();
                        } else {
                                parentSym = ((ConcurrentCompositeNode)parentCS).getSymbol();
                        }
                        // Record the parent CS in this state's symbol
                        Symbol stateSym = tNode.getSymbol();
                        stateSym.putData("parentCS", parentSym);
                        // Record this state in parent CS's symbol
                        Vector<Symbol> subStates = (Vector<Symbol>)parentSym.getData("substates");
                        subStates.add(stateSym);
                }
                {if (true) return rootNode.addChildToNode(tNode, childNode);}
    throw new Error("Missing return statement in function");
  }

  final public aNode statebody() throws ParseException, ParseException {
        StateBodyNode tNode = new StateBodyNode();
        aNode childNode;
    label_6:
    while (true) {
      childNode = statestmt();
                  rootNode.addChildToNode(tNode, childNode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRANS:
      case ACTION:
      case INVARIANT:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
    }
          {if (true) return tNode;}
    throw new Error("Missing return statement in function");
  }

  final public aNode statestmt() throws ParseException, ParseException {
        aNode tNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANS:
      tNode = transition();
                               {if (true) return tNode;}
      break;
    case ACTION:
    case INVARIANT:
      tNode = actofstate();
                               {if (true) return tNode;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public aNode transition() throws ParseException, ParseException {
        TransitionNode tNode;
        Token t;
        String tID = "";
        aNode childNode = null;
    jj_consume_token(TRANS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQUOTE:
      jj_consume_token(DQUOTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
      case ID:
      case FULLID:
      case SLASH:
      case CARET:
      case EXPRESSION:
        childNode = transitionbody();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(ENDQUOTE);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(TO);
    t = jj_consume_token(ID);
                   tID = t.image;
    jj_consume_token(SEMICOLON);
                tNode = new TransitionNode (tID);
                {if (true) return rootNode.addChildToNode (tNode, childNode);}
    throw new Error("Missing return statement in function");
  }

  final public aNode actofstate() throws ParseException, ParseException {
        ActionNode actNode;
        aNode childNode = null;
        Token t;
        String invTypeName = "";
        String invExpression = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACTION:
      jj_consume_token(ACTION);
      jj_consume_token(DQUOTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
      case ID:
      case FULLID:
      case SLASH:
      case CARET:
      case EXPRESSION:
        childNode = transitionbody();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(ENDQUOTE);
      jj_consume_token(SEMICOLON);
                actNode = new ActionNode ("noID");
                {if (true) return rootNode.addChildToNode (actNode, childNode);}
      break;
    case INVARIANT:
      jj_consume_token(INVARIANT);
      jj_consume_token(DQUOTE);
      t = jj_consume_token(INVTYPENAME);
                              invTypeName = t.image;
      jj_consume_token(SLASH);
      t = jj_consume_token(INVARIANTEXPRESSION);
                                      invExpression = t.image;
      jj_consume_token(ENDQUOTE);
      jj_consume_token(SEMICOLON);
                {if (true) return new TimeInvariantNode(invTypeName, invExpression);}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public aNode ccstate() throws ParseException, ParseException {
        ConcurrentCompositeNode tNode;
        Token t;
        String tID = "";
        aNode childNode = null;
    jj_consume_token(CCSTATE);
    t = jj_consume_token(ID);
                   tID = t.image; tNode = new ConcurrentCompositeNode(tID); compositeStates.push(tNode);
    jj_consume_token(LCURLY);
    childNode = ccstatebody();
    jj_consume_token(RCURLY);
                compositeStates.pop();
                {if (true) return rootNode.addChildToNode(tNode, childNode);}
    throw new Error("Missing return statement in function");
  }

  final public aNode ccstatebody() throws ParseException, ParseException {
        ConcurrentCompositeBodyNode tNode;
        aNode childNode;
    label_7:
    while (true) {
      childNode = ccstatestmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CSTATE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
    }
                tNode = new ConcurrentCompositeBodyNode();
                {if (true) return rootNode.addChildToNode(tNode, childNode);}
    throw new Error("Missing return statement in function");
  }

  final public aNode ccstatestmt() throws ParseException, ParseException {
        aNode tNode;
    tNode = cstate();
                           {if (true) return tNode;}
    throw new Error("Missing return statement in function");
  }

  final public aNode init() throws ParseException, ParseException {
        InitNode tNode;
        aNode childNode = null;
        Token t;
        String tID = "";
    jj_consume_token(INIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQUOTE:
      jj_consume_token(DQUOTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
      case ID:
      case FULLID:
      case SLASH:
      case CARET:
      case EXPRESSION:
        childNode = transitionbody();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(ENDQUOTE);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    t = jj_consume_token(ID);
                   tID = t.image;
    jj_consume_token(SEMICOLON);
                tNode = new InitNode (tID);
                {if (true) return rootNode.addChildToNode(tNode, childNode);}
    throw new Error("Missing return statement in function");
  }

  final public aNode join() throws ParseException, ParseException {
//	JoinNode tNode;
        Token t;
        String joinID, toID, fromID;
    jj_consume_token(JOIN);
    t = jj_consume_token(ID);
                   joinID = t.image;
    jj_consume_token(FROM);
    t = jj_consume_token(ID);
                   fromID = t.image;
    jj_consume_token(TO);
    t = jj_consume_token(ID);
                   toID = t.image;
    jj_consume_token(SEMICOLON);
          {if (true) return new JoinNode (joinID, toID, fromID);}
    throw new Error("Missing return statement in function");
  }

  final public aNode history() throws ParseException, ParseException {
        HistoryNode tNode;
        aNode childNode = null;
        Token t;
        String tID = "";
    jj_consume_token(HISTORY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQUOTE:
      jj_consume_token(DQUOTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
      case ID:
      case FULLID:
      case SLASH:
      case CARET:
      case EXPRESSION:
        childNode = transitionbody();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(ENDQUOTE);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    t = jj_consume_token(ID);
                   tID = t.image;
    jj_consume_token(SEMICOLON);
                tNode = new HistoryNode (tID);
                {if (true) return rootNode.addChildToNode(tNode, childNode);}
    throw new Error("Missing return statement in function");
  }

  final public aNode instvar(String className) throws ParseException, ParseException {
        Token t;
        String vType = "";
        String tVar = "";
        String initVal = "";
    jj_consume_token(INSTVAR);
    t = jj_consume_token(ID);
                   vType = t.image;
    t = jj_consume_token(ID);
                   tVar = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNOP:
      jj_consume_token(ASSIGNOP);
      initVal = numid();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                classInstances.put(className + "." + tVar, vType);
                try {
                        {if (true) return new InstanceVariableNode(vType, tVar, initVal, className);}
                } catch(Exception e) {
                        {if (true) throw new ParseException();}
                }
    throw new Error("Missing return statement in function");
  }

  final public void assocbody() throws ParseException, ParseException {
    jj_consume_token(ID);
    jj_consume_token(LBRACKET);
    jj_consume_token(ID);
    jj_consume_token(RBRACKET);
    jj_consume_token(ID);
    jj_consume_token(LBRACKET);
    jj_consume_token(ID);
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDCONST:
      ordconst();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void agsubbody() throws ParseException, ParseException {
    jj_consume_token(ID);
  }

  final public void ordconst() throws ParseException, ParseException {
    jj_consume_token(ORDCONST);
    jj_consume_token(ADORNS);
    jj_consume_token(ID);
  }

  final public void agbody() throws ParseException, ParseException {
    jj_consume_token(WHOLE);
    jj_consume_token(ID);
    jj_consume_token(LBRACKET);
    jj_consume_token(ID);
    jj_consume_token(RBRACKET);
    jj_consume_token(PART);
    jj_consume_token(ID);
    jj_consume_token(LBRACKET);
    jj_consume_token(ID);
    jj_consume_token(RBRACKET);
  }

  final public aNode transitionbody() throws ParseException, ParseException {
        TransitionBodyNode tNode;
        aNode theEventNode = null;
        String theGuard = "";
        aNode theTransitionActionsNode = null;
        aNode theMessagesNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
    case ID:
    case FULLID:
      theEventNode = event();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXPRESSION:
        theGuard = guard();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        jj_consume_token(SLASH);
        theTransitionActionsNode = actions();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARET:
        jj_consume_token(CARET);
        theMessagesNode = messages();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      break;
    case EXPRESSION:
      //			( theEventNode = event() )?
                              theGuard = guard();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        jj_consume_token(SLASH);
        theTransitionActionsNode = actions();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARET:
        jj_consume_token(CARET);
        theMessagesNode = messages();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      break;
    case SLASH:
      jj_consume_token(SLASH);
      theTransitionActionsNode = actions();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARET:
        jj_consume_token(CARET);
        theMessagesNode = messages();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      break;
    case CARET:
      jj_consume_token(CARET);
      theMessagesNode = messages();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                tNode = new TransitionBodyNode (theGuard);
                rootNode.addChildToNode(tNode, theEventNode);
                rootNode.addChildToNode(tNode, theTransitionActionsNode);
                {if (true) return rootNode.addChildToNode(tNode, theMessagesNode);}
    throw new Error("Missing return statement in function");
  }

  final public aNode event() throws ParseException, ParseException {
        Token t;
        String className = "";
        String eventName = "";
        String eventWhenVar = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case FULLID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
                                   eventName = t.image;
        break;
      case FULLID:
        t = jj_consume_token(FULLID);
                                       eventName = t.image;
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPARENS:
        jj_consume_token(LPARENS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case MINUS:
        case LPARENS:
        case NUM:
        case ID:
        case FULLID:
          eventWhenVar = expression();
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        jj_consume_token(RPARENS);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
                if (eventName.contains(".")) {
                        System.err.println("Error: transition waits for an event `" +
                                eventName + "', which is declared in another class.  Please" +
                                " revise the transition to watch a" +
                                " variable in the transition guard instead.");
                        {if (true) throw new ParseException();}
                }
                {if (true) return new EventNode (currentClass, eventName, "normal", eventWhenVar);}
      break;
    case WHEN:
      jj_consume_token(WHEN);
      jj_consume_token(LPARENS);
      if (jj_2_1(2)) {
        eventWhenVar = expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t = jj_consume_token(ID);
                                     eventWhenVar = t.image;
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPARENS);
          {if (true) return new EventNode ("", eventName, "when", eventWhenVar);}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String guard() throws ParseException, ParseException {
        Token t;
    t = jj_consume_token(EXPRESSION);
                           {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public aNode actions() throws ParseException, ParseException {
        TransitionActionsNode tNode = new TransitionActionsNode();
        aNode childNode;
    childNode = action();
                               rootNode.addChildToNode(tNode, childNode);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_8;
      }
      if (jj_2_2(2)) {
        jj_consume_token(SEMICOLON);
        childNode = action();
                                                           rootNode.addChildToNode(tNode, childNode);
      } else if (jj_2_3(2)) {
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return tNode;}
    throw new Error("Missing return statement in function");
  }

  final public aNode action() throws ParseException, ParseException {
        aNode tNode;
        Token t;
        String content;
        aNode childNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
      jj_consume_token(LPARENS);
      t = jj_consume_token(ID);
                     content = t.image;
      jj_consume_token(RPARENS);
            {if (true) return new TransitionActionNode ("newaction", content);}
      break;
    case SEND:
      jj_consume_token(SEND);
      jj_consume_token(LPARENS);
      childNode = message();
      jj_consume_token(RPARENS);
                        tNode = new TransitionActionNode ("sendmsg");
                        {if (true) return rootNode.addChildToNode(tNode, childNode);}
      break;
    case PRINT:
      tNode = printstmt();
                                      {if (true) return tNode;}
      break;
    default:
      jj_la1[43] = jj_gen;
      if (jj_2_4(2)) {
        tNode = assignstmt();
                                       {if (true) return tNode;}
      } else if (jj_2_5(2)) {
        tNode = functionInAction();
                                             {if (true) return tNode;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public aNode messages() throws ParseException, ParseException {
        MessagesNode tNode = new MessagesNode();
        aNode childNode;
    childNode = message();
                                rootNode.addChildToNode(tNode, childNode);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARET:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_9;
      }
      jj_consume_token(CARET);
      childNode = message();
                                          rootNode.addChildToNode(tNode, childNode);
    }
          {if (true) return tNode;}
    throw new Error("Missing return statement in function");
  }

  final public aNode message() throws ParseException, ParseException {
        Token t;
        String classname = "";
        String signalname = "";
        String varname = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                           signalname = t.image;
      break;
    case FULLID:
      t = jj_consume_token(FULLID);
                        int dotPos = t.image.indexOf(".");
                        classname = t.image.substring(0, dotPos);
                        signalname = t.image.substring(dotPos + 1);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARENS:
      jj_consume_token(LPARENS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case MINUS:
      case LPARENS:
      case NUM:
      case ID:
      case FULLID:
        varname = expression();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      jj_consume_token(RPARENS);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
          {if (true) return new MessageNode (classname, signalname, varname);}
    throw new Error("Missing return statement in function");
  }

  final public aNode assignstmt() throws ParseException, ParseException {
        Token t;
        String retVal = "";
        String temp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                           retVal += t.image;
      break;
    case FULLID:
      t = jj_consume_token(FULLID);
                               retVal += t.image;
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(ASSIGNOP);
                         retVal += t.image;
    temp = expression();
                              retVal += temp;
          {if (true) return new TransitionActionNode ("assignstmt", retVal);}
    throw new Error("Missing return statement in function");
  }

  final public aNode printstmt() throws ParseException, ParseException {
        Token t;
        String content = "";
        String parmlistStr = "";
    jj_consume_token(PRINT);
    jj_consume_token(LPARENS);
    t = jj_consume_token(PRINTEXPRESSION);
                                content = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      parmlistStr = parameterList();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(RPARENS);
          {if (true) return new TransitionActionNode ("printstmt", content, parmlistStr);}
    throw new Error("Missing return statement in function");
  }

  final public aNode functionInAction() throws ParseException, ParseException {
        Token t;
        String funcID = "";
        String parmlistStr = "";
        Boolean isFullIdentifier = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                                   funcID = t.image; isFullIdentifier = false;
      break;
    case FULLID:
      t = jj_consume_token(FULLID);
                                       funcID = t.image; isFullIdentifier = true;
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPARENS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case MINUS:
    case LPARENS:
    case NUM:
    case ID:
    case FULLID:
      parmlistStr = parameterList();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    jj_consume_token(RPARENS);
                System.err.println("Error: `" + funcID + "(" + parmlistStr + ")'" +
                        " is a function call in an action list.  Function " +
                        "calls should appear after the action list and must be prefixed " +
                        "by a caret (^).");
                {if (true) throw new ParseException();}
    throw new Error("Missing return statement in function");
  }

  final public String function() throws ParseException, ParseException {
        Token t;
        String funcID = "";
        String parameterListStr = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                                   funcID = t.image;
      break;
    case FULLID:
      t = jj_consume_token(FULLID);
                                       funcID = t.image;
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPARENS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case MINUS:
    case LPARENS:
    case NUM:
    case ID:
    case FULLID:
      parameterListStr = parameterList();
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    jj_consume_token(RPARENS);
          {if (true) return (funcID + "(" + parameterListStr + ")");}
    throw new Error("Missing return statement in function");
  }

  final public String functioninassign() throws ParseException, ParseException {
        Token t;
        String funcID = "";
        String parmlistStr = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                           funcID = t.image;
      break;
    case FULLID:
      t = jj_consume_token(FULLID);
                               funcID = t.image;
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPARENS);
    parmlistStr = parameterList();
    jj_consume_token(RPARENS);
          {if (true) return (funcID + "(" + parmlistStr + ")");}
    throw new Error("Missing return statement in function");
  }

  final public String parameterList() throws ParseException, ParseException {
        String retVal = "";
        String temp = "";
    temp = parm();
                        retVal += temp;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      temp = parm();
                                retVal += temp;
    }
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String parm() throws ParseException, ParseException {
        Token t;
        String temp;
    temp = expression();
                              {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public String pred() throws ParseException, ParseException {
        Token t;
        String retVal = "";
        String temp = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case ID:
    case FULLID:
      temp = numid();
                                 retVal += temp;
      t = jj_consume_token(COMPARE_OP);
                                   retVal += t.image;
      temp = numid();
                                 retVal += temp;
             {if (true) return retVal;}
      break;
    case IN:
      t = jj_consume_token(IN);
                           retVal += t.image;
      jj_consume_token(LPARENS);
      t = jj_consume_token(ID);
                           retVal += "(" + t.image + ")";
      jj_consume_token(RPARENS);
             {if (true) return retVal;}
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String expression() throws ParseException, ParseException {
        String retVal = "";
    retVal = logicalExpression();
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String logicalExpression() throws ParseException, ParseException {
        String retVal = "";
        String temp = "";
    retVal = booleanExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_11;
      }
      jj_consume_token(OR);
      temp = booleanExpression();
                                             retVal = retVal + "||" + temp;
    }
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String booleanExpression() throws ParseException, ParseException {
        String retVal = "";
        String temp = "";
    retVal = equalityExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_12;
      }
      jj_consume_token(AND);
      temp = equalityExpression();
                                              retVal = retVal + "&&" + temp;
    }
          {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String equalityExpression() throws ParseException, ParseException {
        Token t;
        String temp1 = "";
        String temp2 = "";
        String temp3 = "";
    temp1 = relationalExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALITY_OP:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_13;
      }
      t = jj_consume_token(EQUALITY_OP);
                                    temp2 = t.image.replace("<>", "!=");
      temp3 = relationalExpression();
    }
          {if (true) return temp1 + temp2 + temp3;}
    throw new Error("Missing return statement in function");
  }

  final public String relationalExpression() throws ParseException, ParseException {
        Token t;
        String temp1 = "";
        String temp2 = "";
        String temp3 = "";
    temp1 = additiveExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPARE_OP:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_14;
      }
      t = jj_consume_token(COMPARE_OP);
                                   temp2 = t.image;
      temp3 = additiveExpression();
    }
          {if (true) return temp1 + temp2 + temp3;}
    throw new Error("Missing return statement in function");
  }

  final public String additiveExpression() throws ParseException, ParseException {
        Token t;
        String temp1 = "";
        String temp2 = "";
        String temp3 = "";
    temp1 = multiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
                                     temp2 = t.image;
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
                                      temp2 = t.image;
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      temp3 = multiplicativeExpression();
    }
          {if (true) return temp1 + temp2 + temp3;}
    throw new Error("Missing return statement in function");
  }

  final public String multiplicativeExpression() throws ParseException, ParseException {
        Token t;
        String temp1 = "";
        String temp2 = "";
        String temp3 = "";
    temp1 = unaryExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case SLASH:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        t = jj_consume_token(TIMES);
                                      temp2 = t.image;
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
                                      temp2 = t.image;
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      temp3 = unaryExpression();
    }
          {if (true) return temp1 + temp2 + temp3;}
    throw new Error("Missing return statement in function");
  }

  final public String unaryExpression() throws ParseException, ParseException {
        Token t;
        String temp = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARENS:
    case NUM:
    case ID:
    case FULLID:
      temp = primaryExpression();
                                             {if (true) return temp;}
      break;
    case NOT:
      jj_consume_token(NOT);
      temp = primaryExpression();
                                             {if (true) return "!" + temp;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      temp = primaryExpression();
                                              {if (true) return "-" + temp;}
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String primaryExpression() throws ParseException, ParseException {
        Token t;
        String temp = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARENS:
      jj_consume_token(LPARENS);
      temp = logicalExpression();
      jj_consume_token(RPARENS);
      break;
    default:
      jj_la1[66] = jj_gen;
      if (jj_2_6(2)) {
        temp = function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case ID:
        case FULLID:
          temp = numid();
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public String numid() throws ParseException, ParseException {
        Token t;
        String temp = "";
        boolean isnot = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                            {if (true) return InstVar(t.image);}
      break;
    case FULLID:
      t = jj_consume_token(FULLID);
                               {if (true) return InstVar(t.image);}
      break;
    case NUM:
      t = jj_consume_token(NUM);
                            {if (true) return t.image;}
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(FULLID)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    if (jj_scan_token(ASSIGNOP)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(EQUALITY_OP)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(LPARENS)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(FULLID)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    if (jj_scan_token(LPARENS)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(FULLID)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(SEND)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    if (jj_scan_token(LPARENS)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(COMPARE_OP)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(FULLID)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public HILParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[69];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x1e000,0x0,0x3c0000,0x0,0x0,0x1cc00000,0x0,0x3c0000,0x1cc00000,0x1cc00000,0x0,0x0,0xb8000000,0xb8000000,0xb8000000,0xa0000000,0xa0000000,0xa0000000,0x0,0x400,0x0,0x80000000,0x8000000,0x0,0x400,0x0,0x400,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x40,0x40000000,0x8000,0x27,0x40000000,0x40,0x27,0x27,0x0,0x8000000,0x2017,0x2017,0x2017,0x2000,0x2000,0x2000,0x800,0x0,0x800,0x2000,0x0,0x800,0x0,0x800,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x9020000,0x8000000,0x0,0x800,0x4000000,0x1600,0x0,0x0,0x9020000,0x8000000,0x0,0x40000000,0x0,0x9020000,0x0,0x9020000,0x0,0x40000000,0x200000,0x40000,0x10000,0x100000,0x80000,0x1800000,0x1800000,0x2000000,0x2000000,0x9020000,0x8000000,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2d8,0x0,0x2d8,0x0,0x0,0x2d8,0x0,0x2d8,0x0,0x0,0x0,0x200,0x40,0x80,0x40,0x80,0x80,0x2d8,0x18,0x1c,0x0,0x8,0x18,0x0,0x0,0x80,0x18,0x1c,0x0,0x18,0x0,0x18,0x1c,0x18,0x1c,0x18,0x0,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x1c,0x0,0x1c,0x1c,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HILParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HILParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HILParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HILParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HILParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HILParser(HILParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HILParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[76];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 69; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 76; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
