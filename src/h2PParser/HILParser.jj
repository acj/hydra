/**
 * HILParser.jj
 * 
 * Hydra HIL parser
 *
 * This grammar generates/parses HIL (Hydra Intermediate Language).
 */

options {
  //LOOKAHEAD=3;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  STATIC = false;
}

PARSER_BEGIN(HILParser)

package h2PParser;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import h2PNodes.*;
import h2PFoundation.*;
import h2PFoundation.Symbol.SymbolType;

public class HILParser extends NodeUtilityClass {
    protected WorldUtilNode rootNode;
    protected String currentClass;
    protected Stack<aNode> compositeStates; // Track nested CS nodes
    protected Map<String, String> classInstances;
    protected Map<String, HashSet<String>> classInheritance;
	
    public HILParser (WorldUtilNode theRootNode) {
    	setRootNode (theRootNode);
    }
	
    public void setRootNode (WorldUtilNode theRootNode) {
    	rootNode = theRootNode;
    }
    
    public void parse () {
    	try {
    		compositeStates = new Stack<aNode>();
    		classInstances = new HashMap<String, String>();
    		classInheritance = new HashMap<String, HashSet<String>>();
    		spec();
    		
            // Process generalization/inheritance relationships
            for (String key : classInheritance.keySet()) {
            	String superClassName = key;
            	ClassNode superClassNode = findClassNodeByID(rootNode, superClassName);
            	assert(superClassNode != null);
            	
            	// For each subclass that inherits this superclass, place a
            	// copy of the superclass's instance variables and signals
            	// into the subclass.
            	for (String subClassName : classInheritance.get(key)) {
                	ClassNode subClassNode = findClassNodeByID(rootNode, subClassName);
                	assert(subClassNode != null);
                	
                	assert(superClassNode.children.size() == 1 &&
                		superClassNode.children.get(0).getType().equals("ClassBodyNode"));
                	ClassBodyNode cBodyNode = (ClassBodyNode)superClassNode.children.get(0);
                	assert(cBodyNode != null);
                	
        			// Nodes at this level should be instance variables,
        			// signals, states, etc.
        			for (aNode cbChildNode : cBodyNode.children) {
        				String memberName = "";
        				if (cbChildNode.getType().equals("InstanceVariableNode")) {
        					InstanceVariableNode instNode = (InstanceVariableNode)cbChildNode;
        					memberName = instNode.getVar();
        					assert(!memberName.equals(""));
        					if (SymbolTable.symbolExistsInClass(memberName, subClassName)) {
        						System.err.println("Error: Class " + subClassName +
        								" already has a member ``" + instNode.getVar() +
        								"'' that would be shadowed by the inherited member in " +
        								superClassName + ".");
        						throw new ParseException();
        					} else {
        						InstanceVariableNode newInstNode = new InstanceVariableNode(
                                	instNode.getVType(), instNode.getVar(),
                                	instNode.getInitValue(), subClassName);
                                Symbol newInstSym = newInstNode.getSymbol();

        						// Is this an instance of a class?  If so, then
        						// add a reference to this new instance to the
        						// class's list of instances.
        						if (SymbolTable.symbolExists(newInstNode.getVType(), SymbolType.CLASS)) {
        							Symbol classSym = SymbolTable.getSymbol(newInstNode.getVType());
        							classInstances.put(subClassName + "." + newInstNode.getVar(), newInstNode.getVType());
        						}
        						aNode subClassBodyNode = subClassNode.children.get(0);
        						assert(subClassBodyNode != null);
        						rootNode.addChildToNode(subClassBodyNode, newInstNode);
        					}
        				} else if (cbChildNode.getType().equals("SignalNode")) {
        					SignalNode sigNode = (SignalNode)cbChildNode;
        					memberName = sigNode.getName();
        					assert(!memberName.equals(""));
        					if (SymbolTable.symbolExistsInClass(memberName, subClassName)) {
        						System.err.println("Error: Class " + subClassName +
        								" already has an operation ``" + sigNode.getName() +
        								"'' that would be shadowed by the inherited operation in " +
        								superClassName + ".");
        						throw new ParseException();
        					} else {
        						SignalNode newSigNode = new SignalNode(
        							sigNode.getName(), sigNode.getSignalType(),
        							subClassName);
        						aNode subClassBodyNode = subClassNode.children.get(0);
        						assert(subClassBodyNode != null);
        						rootNode.addChildToNode(subClassBodyNode, newSigNode);
        					}
        				}
        			}
                }
            }
            
            // Process class instances.  classInstances maps the full name of
            // the symbol to the name of the class of which it is an instance.
    		for (String key : classInstances.keySet()) {
				Symbol instanceSym = SymbolTable.getSymbol(key);
				Symbol typeSym = SymbolTable.getSymbol(classInstances.get(key));
				
			  	// Tally this instance in the class's symbol
			  	if (typeSym != null &&
			  			typeSym.getType().equals(SymbolType.CLASS)) {
		        	typeSym.addClassInstance(instanceSym);
		        }
    		}
	    } catch (ParseException pe) {
	    	if (currentClass != null) {
	        	System.err.println("\nThe error occurred in class `" + currentClass + "'.\n");
	        }
	        if (pe.getMessage() != null) {
	       		System.err.println("The misbehaving line is as follows:\n\n" +
	       			pe.getMessage());
	       	}
	        System.exit(-1);
	    }
    }
    
    // Dummy method to allow us to use the same expression rules from
    // UMLExpr.
    public String InstVar (String varname) {
    	return varname;
    }
}

PARSER_END(HILParser)

<*>SKIP : /* skip is necessary in expressions too! */
{
 	" "
|	"\r"
|	"\t"
|   "\n"
|   "\f"
}

TOKEN: /* main items */
{
	<LCURLY: "{">
|	<RCURLY: "}">
|	<LBRACKET: "[">
|	<RBRACKET: "]">
|	<DQUOTE: "\""> : IN_EXPRESSION_GRAMMAR
}

<*>TOKEN :  /* Keywords */
{
   <FORMALIZE: "Formalize">  // ignore case on the keywords?
|  <AS: "as">
|  <SMV: "smv">
|  <PROMELA: "promela">
|  <ALLOY: "alloy">
|  <VHDL: "vhdl">
|  <MODEL: "Model">

|  <DRIVERFILE: "DriverFile">
|  <CLASS: "Class">
|  <ASSOCIATION: "Association">
|  <AGGREGATION: "Aggregation">
|  <AGSUBCONST: "Aggregation-Subclass-Constraint">
|  <ORDCONST: "Ordered-Constraint">
|  <ADORNS: "adorns">
|  <GENERALIZATION: "Generalization">

|  <SIGNAL: "Signal">
|  <CSTATE: "CompositeState">
|  <STATE: "State">
|  <TRANS: "Transition">
|  <TO: "to">
|  <ACTION: "Action">
|  <CCSTATE: ("CCState" | "ConcurrentState")>
|  <INIT: "Initial">
|  <JOIN: "Join">
|  <FROM: "from">
|  <HISTORY: "History">
|  <INSTVAR: "InstanceVar">
|  <ENUM: "Enum">

|  <WHOLE: "Whole">
|  <PART: "Part">
|  <NEW: "new">
|  <SEND: "send">

|  <WHEN: "when">
|  <PRINT: "print">

| <INVARIANT: "Invariant">
| <INVTYPENAME: "timeinvar">

}

<*> TOKEN : /* OPERATORS, IDENTIFIERS & NUMBERS */
{
   <INHERITS: "<">
|  <AND: "&&" | "&"> 
|  <NOT: "~" | "!">
|  <OR: "||" | "|">
|  <COMPARE_OP: ">=" | "<=" | ">" | "<">
|  <EQUALITY_OP: "==" | "!=" | "<>"> 
|  <IN: "in">
|  <ASSIGNOP: ":=" | "=">

|  <PLUS: "+">
|  <MINUS: "-">
|  <TIMES: "*">
|  <SEMICOLON: ";">
|  <LPARENS: "(">
|  <RPARENS: ")">
|  <PERIOD: ".">
|  <COMMA: ",">

// TODO the negative causes problems in lexing, the negative 
// numbers will have to be moved directly into the parser!
|   < #CONSTANT: ("-")? ( <DIGIT> )+ >
//|   < #CONSTANT: ( <DIGIT> )+ >
|   < #DIGIT: ["0" - "9"] >
|   < #LETTER: ["A"-"Z"] | ["a"-"z"] >
|  <NUM: <CONSTANT> >
|  <ID:  (<LETTER> | "_")( <LETTER> | "_" | <DIGIT>)* >
|  <FULLID: <ID> <PERIOD> <ID>>
}

/*  from C.jj
TOKEN : {
 <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  <CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
|  <STRING_LITERAL: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
}
*/

<IN_EXPRESSION_GRAMMAR> TOKEN :
{
   <ENDQUOTE: "\""> : DEFAULT
|  <SLASH: "/">
|  <CARET: "^">
|  <#MINIEXPRESSION: (~["\""])+ >  // [^\"]+
|  <EXPRESSION: "[" <MINIEXPRESSION> "]" > //   \[[^\"]+\]
|  <INVARIANTEXPRESSION: "{" <MINIEXPRESSION> "}" > // \{[^\"]+\}
|  <PRINTEXPRESSION: "\'" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\'">
// |  <PRINTEXPRESSION: "'" ((~["\""])|(~["'"]))+ "'" > //    \'[^\"\']+\'  // NOT CORRECT!!!
}


void spec() throws ParseException:
{}
{
  (
  <FORMALIZE>
  <AS>
  language()
  <SEMICOLON>
  )?
  model()
  // <EOF>
}

void language() throws ParseException:
{}
{
  <PROMELA> |
  <SMV>     |
  <ALLOY>   |
  <VHDL>
}

void model() throws ParseException:
{
  ModelNode tNode;
  ModelBodyNode childNode;
  Token t;
  String ModelID = "";
}
{
  ( 
  	<MODEL>
	( t = <ID>  { ModelID = t.image; } )?
  	<LCURLY>  childNode = modelbody()  <RCURLY> 
  )
  {
    tNode = new ModelNode (ModelID);
    rootNode.addChildToNode(tNode, childNode);
    rootNode.addChild(tNode); // add the head node to the root.
  }
}

ModelBodyNode modelbody() throws ParseException:
{
  ModelBodyNode tNode = new ModelBodyNode ();	
  aNode childNode;
}
{
	( 
	  childNode = modelstmt() 
	  { rootNode.addChildToNode(tNode, childNode); }  
	)+
	{ return tNode; }
}

aNode modelstmt() throws ParseException:
{
  Token t;
  String tID = "";
  ClassNode cNode = null;
  ClassBodyNode cbNode = null;
  EnumNode enumNode;
}
{
  (
    <DRIVERFILE>
    t = <ID> <SEMICOLON> { tID = t.image; }
  )
  { return new DriverFileNode(tID);  }
| (
    <CLASS>
    t = <ID> { tID = t.image; currentClass = tID; }
    (
    	<INHERITS>
    	t = <ID>
    	{
    		String superName = t.image;
			if (!classInheritance.containsKey(superName)) {
				HashSet<String> inheritsSet = new HashSet<String>();
				inheritsSet.add(currentClass);
				classInheritance.put(superName, inheritsSet);
			} else {
				classInheritance.get(superName).add(currentClass);
			}
		}
		(
			<COMMA>
			t = <ID>
		)*
		{
			superName = t.image;
			if (!classInheritance.containsKey(superName)) {
				HashSet<String> inheritsSet = new HashSet<String>();
				inheritsSet.add(currentClass);
				classInheritance.put(superName, inheritsSet);
			} else {
				classInheritance.get(superName).add(currentClass);
			}
		}	
    )?
    <LCURLY> 
    ( cbNode = classbody(currentClass) )?
    <RCURLY>
  )
  { 
  	cNode = new ClassNode(currentClass);
  	return rootNode.addChildToNode(cNode, cbNode);
  } 
| (
    <ASSOCIATION>
    <ID>
    <LCURLY> assocbody()<RCURLY>
  ) { return null; } // TODO
| (
    <AGGREGATION>
    <ID>
    <LCURLY> agbody()<RCURLY>
  ) { return null; } // TODO
| (
	<ENUM>
	t = <ID> { enumNode = new EnumNode(t.image); }
	<LPARENS>
	t = <ID> { enumNode.addEnum(t.image); }
	(
		<COMMA>
		t = <ID> { enumNode.addEnum(t.image); }
	)*
	{
		
	}
	<RPARENS>
	<SEMICOLON>
  )
  { return enumNode; }
}

ClassBodyNode classbody(String className) throws ParseException:
{
  ClassBodyNode tNode = new ClassBodyNode ();	
  aNode childNode;
}
{
	( childNode = classstmt(className)
	  {
	  	rootNode.addChildToNode(tNode, childNode);
	  }  
	)+
	{ return tNode; }
}

aNode classstmt(String className) throws ParseException:
{
	aNode tNode;
}
{
	tNode = signal(className) { return tNode; }
|	tNode = cstate() { return tNode; }
|	tNode = ccstate() { return tNode; }
|	tNode = init() { return tNode; }
|	tNode = join() { return tNode; }
/* |	tNode = history() { return tNode; } */
|	tNode = state() { return tNode; }
|	tNode = instvar(className) { return tNode; }
|	(
	<AGSUBCONST>
	<ADORNS>
	<ID>
	<LCURLY> agsubbody() <RCURLY>
	) {return null;}
|	ordconst() { return null; }
}

aNode signal(String className) throws ParseException:
{
	Token t;
	String signame = "";
	String sigtype = "";
}
{
  <SIGNAL>
  t = <ID> { signame = t.image; }
  ( 
    <LPARENS>
    ( t=<ID> { sigtype = t.image; }  )?
    <RPARENS>
  )?
  <SEMICOLON>
  { return new SignalNode(signame, sigtype, className); }
}

aNode cstate() throws ParseException:
{
	Token t;
	String tID = "";
	aNode csBody = null;
	CompositeStateNode tNode;
}
{
	<CSTATE>
	t = <ID> { tID = t.image; tNode = new CompositeStateNode(tID); compositeStates.push(tNode); }
	<LCURLY>
	( csBody = cstatebody() )?
	<RCURLY>
	{
		compositeStates.pop();
		return rootNode.addChildToNode (tNode, csBody);
	}
}

aNode cstatebody() throws ParseException:
{
	CompositeStateBodyNode tNode = new CompositeStateBodyNode();
	aNode childNode;
}
{
	( childNode = cstatestmt() 
		{ rootNode.addChildToNode(tNode, childNode);  }  
	)+
	{ return tNode; }
}

aNode cstatestmt() throws ParseException:
{
	aNode tNode;
}
{
	tNode = state() { return tNode; }
|	tNode = init() { return tNode; }
|	tNode = cstate() { return tNode; }
|	tNode = join() { return tNode; }
|	tNode = history() { return tNode; } 
|	tNode = ccstate() { return tNode; }
|	tNode = transition() { return tNode; }
|	tNode = actofstate() { return tNode; }
}

aNode state() throws ParseException:
{
	StateNode tNode;
	Token t;
	String tID = "";
	aNode childNode = null;
}
{
	<STATE>
	t = <ID> { tID = t.image; }
	<LCURLY>
	( childNode = statebody() )?
	<RCURLY>
	{ 
		tNode = new StateNode(tID);
		if (!compositeStates.empty()) {
			aNode parentCS = compositeStates.peek();
			assert(parentCS.getType().equals("CompositeStateNode") ||
				parentCS.getType().equals("ConcurrentCompositeNode"));
			Symbol parentSym;
			if (parentCS.getType() == "CompositeStateNode") {
				parentSym = ((CompositeStateNode)parentCS).getSymbol();
			} else {
				parentSym = ((ConcurrentCompositeNode)parentCS).getSymbol();
			}
			// Record the parent CS in this state's symbol
			Symbol stateSym = tNode.getSymbol();
			stateSym.putData("parentCS", parentSym);
			// Record this state in parent CS's symbol
			Vector<Symbol> subStates = (Vector<Symbol>)parentSym.getData("substates");
			subStates.add(stateSym);
		}
		return rootNode.addChildToNode(tNode, childNode);
	}
}

aNode statebody() throws ParseException:
{
	StateBodyNode tNode = new StateBodyNode();
	aNode childNode;
}
{
	( childNode = statestmt() 
		{ rootNode.addChildToNode(tNode, childNode);  }  
	)+
	{ return tNode; }
}

aNode statestmt() throws ParseException:
{
	aNode tNode;
}
{
	tNode = transition() { return tNode; }
|	tNode = actofstate() { return tNode; }
}

aNode transition() throws ParseException:
{
	TransitionNode tNode;
	Token t;
	String tID = "";
	aNode childNode = null;
}
{
	<TRANS> 
	(
	  // "\""
	  <DQUOTE>
	  ( childNode = transitionbody() )?
	  <ENDQUOTE>
	  // "\""
	)?
	<TO>
	t = <ID> { tID = t.image; }
	<SEMICOLON>
	{
		tNode = new TransitionNode (tID);
		return rootNode.addChildToNode (tNode, childNode);
	}
}

aNode actofstate() throws ParseException:
{
	ActionNode actNode;
	aNode childNode = null;
	Token t;
	String invTypeName = "";
	String invExpression = "";
}
{
	(
	  <ACTION> <DQUOTE>
	  ( childNode = transitionbody() )?
	  <ENDQUOTE> <SEMICOLON>
	)
	{ 
		actNode = new ActionNode ("noID");
		return rootNode.addChildToNode (actNode, childNode);
	}
|   (
	  <INVARIANT> <DQUOTE>
	  t = <INVTYPENAME> { invTypeName = t.image; }
	  <SLASH> 
	  t = <INVARIANTEXPRESSION> { invExpression = t.image; }
	  <ENDQUOTE> <SEMICOLON>
	)
	{
		return new TimeInvariantNode(invTypeName, invExpression);
	}
}

aNode ccstate() throws ParseException:
{
	ConcurrentCompositeNode tNode;
	Token t;
	String tID = "";
	aNode childNode = null;
}
{
	<CCSTATE>
	t = <ID> { tID = t.image; tNode = new ConcurrentCompositeNode(tID); compositeStates.push(tNode); }
	<LCURLY>	childNode = ccstatebody() <RCURLY>
	{
		compositeStates.pop();
		return rootNode.addChildToNode(tNode, childNode);
	}
}

aNode ccstatebody() throws ParseException:
{
	ConcurrentCompositeBodyNode tNode;
	aNode childNode;
}
{
	(
		childNode = ccstatestmt()
	)+
	{
		tNode = new ConcurrentCompositeBodyNode();
		return rootNode.addChildToNode(tNode, childNode);
	}
}

aNode ccstatestmt() throws ParseException:
{
	aNode tNode;
}
{
	tNode = cstate() { return tNode; }
	// tNode = state() and tNode = actofstate() commented out of original Yacc
}

aNode init() throws ParseException:
{
	InitNode tNode;
	aNode childNode = null;
	Token t;
	String tID = "";
}
{
	<INIT>
	(
	  <DQUOTE>
	  ( childNode = transitionbody() )?
	  <ENDQUOTE>
	)?
	t = <ID> { tID = t.image; }
	<SEMICOLON>
	{
		tNode = new InitNode (tID);
		return rootNode.addChildToNode(tNode, childNode);  
	}
}

aNode join() throws ParseException:
{
//	JoinNode tNode;
	Token t;
	String joinID, toID, fromID;
}
{
	<JOIN>
	t = <ID> { joinID = t.image; }
	<FROM>
	t = <ID> { fromID = t.image; }
	<TO>
	t = <ID> { toID = t.image; }
	<SEMICOLON>
	{ return new JoinNode (joinID, toID, fromID); }
}

aNode history() throws ParseException:
{
	HistoryNode tNode;
	aNode childNode = null;
	Token t;
	String tID = "";
}
{
	<HISTORY>
	(
	  <DQUOTE>
	  ( childNode = transitionbody() )?
	  <ENDQUOTE>
	)?
	t = <ID> { tID = t.image; }
	<SEMICOLON>
	{
		tNode = new HistoryNode (tID);
		return rootNode.addChildToNode(tNode, childNode);
	}
}

aNode instvar(String className) throws ParseException:
{
	Token t;
	String vType = "";
	String tVar = "";
	String initVal = "";
}
{
	<INSTVAR>
	t = <ID> { vType = t.image; }
	t = <ID> { tVar = t.image; }
	( <ASSIGNOP> initVal = numid() )?
	<SEMICOLON>
	{
		classInstances.put(className + "." + tVar, vType);
		return new InstanceVariableNode(vType, tVar, initVal, className);
	}	
}

void assocbody() throws ParseException:
{}
{
	<ID> <LBRACKET> <ID> <RBRACKET> <ID> <LBRACKET> <ID> <RBRACKET>
	( ordconst() )?
}

void agsubbody() throws ParseException:
{}
{
	<ID> // temporary! Fix...
}

void ordconst() throws ParseException:
{}
{
	<ORDCONST> <ADORNS> <ID>
}

void agbody() throws ParseException:
{}
{
	<WHOLE> <ID> <LBRACKET> <ID> <RBRACKET> <PART> <ID> <LBRACKET> <ID> <RBRACKET>
}

aNode transitionbody() throws ParseException:
{
	TransitionBodyNode tNode;
	aNode theEventNode = null;
	String theGuard = "";
	aNode theTransitionActionsNode = null;
	aNode theMessagesNode = null;
}
{	
	(
		(
			theEventNode = event()
			( theGuard = guard() )?
			( <SLASH> theTransitionActionsNode = actions() )?
			( <CARET> theMessagesNode = messages() )?
		)
	|	(
//			( theEventNode = event() )?
			theGuard = guard()
			( <SLASH> theTransitionActionsNode = actions() )?
			( <CARET> theMessagesNode = messages() )?
		)
	|	(
//			( theEventNode = event() )?
//			( theGuard = guard() )?
			<SLASH> theTransitionActionsNode = actions()
			( <CARET> theMessagesNode = messages() )?
		)
	|	(
//			( theEventNode = event() )?
//			( theGuard = guard() )?
//			( <SLASH> theTransitionActionsNode = actions() )?
			<CARET> theMessagesNode = messages()
		)
	)
	{
		tNode = new TransitionBodyNode (theGuard);
		rootNode.addChildToNode(tNode, theEventNode);
		rootNode.addChildToNode(tNode, theTransitionActionsNode);
		return rootNode.addChildToNode(tNode, theMessagesNode);
	}
}

aNode event() throws ParseException:
{
	Token t;
	String className = "";
	String eventName = "";
	String eventWhenVar = "";
}
{
	(
		(
			t = <ID> { eventName = t.image; }
	  	|
	  		t = <FULLID> { eventName = t.image; }
	  	)
		( 
			<LPARENS> 
			( eventWhenVar = expression() )?
			<RPARENS>
		)?
	)
	{
		if (eventName.contains(".")) {
			System.err.println("Error: transition waits for an event `" +
				eventName + "', which is declared in another class.  Please" +
				" revise the transition to watch a" +
				" variable in the transition guard instead.");
			throw new ParseException();
		}
		return new EventNode (currentClass, eventName, "normal", eventWhenVar);
	}
|
	(
		<WHEN> <LPARENS>
		(
			LOOKAHEAD(2) 
			eventWhenVar = expression()
			| t = <ID> { eventWhenVar = t.image; }
		)
		<RPARENS>
	)
	{ return new EventNode ("", eventName, "when", eventWhenVar); }
}

String guard() throws ParseException:
{
	Token t;
}
{
	t = <EXPRESSION> { return t.image; } // why?
}

aNode actions() throws ParseException:
{
	TransitionActionsNode tNode = new TransitionActionsNode();
	aNode childNode;
}
{
	childNode = action() { rootNode.addChildToNode(tNode, childNode); }
	(
			LOOKAHEAD(2)
			<SEMICOLON> childNode = action() { rootNode.addChildToNode(tNode, childNode); }
		|
			LOOKAHEAD(2)
			<SEMICOLON>
	)*
	{ return tNode; }
}

aNode action() throws ParseException:
{
	aNode tNode;
	Token t;
	String content;
	aNode childNode;
}
{
	(
	  <NEW> <LPARENS> 
	  t = <ID> { content = t.image; }
	  <RPARENS>
	) { return new TransitionActionNode ("newaction", content); } 
	|
		(
		  <SEND> <LPARENS>
		  childNode = message()
		  <RPARENS>
		)
		{
			tNode = new TransitionActionNode ("sendmsg"); 
			return rootNode.addChildToNode(tNode, childNode); 
		} 
	|
		tNode = printstmt() { return tNode; }
	|
		LOOKAHEAD(2)
		tNode = assignstmt() { return tNode; }
	|
		LOOKAHEAD(2)
		tNode = functionInAction() { return tNode; }
}

aNode messages() throws ParseException:
{
	MessagesNode tNode = new MessagesNode();
	aNode childNode;
}
{
	childNode = message() { rootNode.addChildToNode(tNode, childNode); }
	( <CARET> childNode = message() { rootNode.addChildToNode(tNode, childNode); } )*
	{ return tNode; }
}

aNode message() throws ParseException:
{
	Token t;
	String classname = "";
	String signalname = "";
	String varname = "";
//	String temp;
}
{
	(
		t = <ID> { signalname = t.image; }
	|
		t = <FULLID>
		{
			int dotPos = t.image.indexOf(".");
			classname = t.image.substring(0, dotPos);
			signalname = t.image.substring(dotPos + 1);
		}
	)
	(
	  	<LPARENS>
	  	( varname = expression() )?
		<RPARENS>
	)?
	{ return new MessageNode (classname, signalname, varname); }
}

aNode assignstmt() throws ParseException:
{
	Token t;
	String retVal = "";
	String temp;
}
{
	(
		t = <ID> { retVal += t.image; }
	|
		t = <FULLID> { retVal += t.image; }
	)
	t = <ASSIGNOP> { retVal += t.image; }
	temp = expression() { retVal += temp; }
	{ return new TransitionActionNode ("assignstmt", retVal); }
}

aNode printstmt() throws ParseException:
{
	Token t;
	String content = "";
	String parmlistStr = "";
}
{
	<PRINT> <LPARENS>
	t = <PRINTEXPRESSION> { content = t.image; }
	(
		<COMMA>
		parmlistStr = parameterList()
	)?
	<RPARENS>
	{ return new TransitionActionNode ("printstmt", content, parmlistStr); }
}

aNode functionInAction() throws ParseException:
{
	Token t;
	String funcID = "";
	String parmlistStr = "";
	Boolean isFullIdentifier = false;
}
{
	(
		(
			t = <ID> { funcID = t.image; isFullIdentifier = false; }
		|
			t = <FULLID> { funcID = t.image; isFullIdentifier = true; }
		)
		<LPARENS>
		( parmlistStr = parameterList() )?
		<RPARENS>
	) 
	{
		System.err.println("Error: `" + funcID + "(" + parmlistStr + ")'" +
			" is a function call in an action list.  Function " +
			"calls should appear after the action list and must be prefixed " +
			"by a caret (^).");
		throw new ParseException();
	}
}

String function() throws ParseException:
{
	Token t;
	String funcID = "";
	String parameterListStr = "";
}
{
	(
		(
			t = <ID> { funcID = t.image; }
		|
			t = <FULLID> { funcID = t.image; }
		)
		<LPARENS>
		( parameterListStr = parameterList() )?
		<RPARENS>
	)
	{ return (funcID + "(" + parameterListStr + ")"); }
}

String functioninassign() throws ParseException:
{
	Token t;
	String funcID = "";
	String parmlistStr = "";
}
{
	(
		t = <ID> { funcID = t.image; }
	|
		t = <FULLID> { funcID = t.image; }
	)
	<LPARENS>
	parmlistStr = parameterList()
	<RPARENS>
	{ return (funcID + "(" + parmlistStr + ")"); }
}

String parameterList() throws ParseException:
{
	String retVal = "";
	String temp = "";
}
{
	temp = parm() { retVal += temp; }
	(
		<COMMA>
		temp = parm() { retVal += temp; }
	)*
	{ return retVal; }
}

String parm() throws ParseException:
{
	Token t;
	String temp;
}
{
	temp = expression() { return temp; }
}

String pred() throws ParseException:
{
	Token t;
	String retVal = "";
	String temp = "";
}
{
	(
		temp = numid() { retVal += temp; }
		t = <COMPARE_OP> { retVal += t.image; }
		temp = numid() { retVal += temp; }
	)  { return retVal; }
|	(
		t = <IN> { retVal += t.image; }
		<LPARENS>
		t = <ID> { retVal += "(" + t.image + ")"; }
		<RPARENS>
	)  { return retVal; }
}

String expression() throws ParseException:
{
	String retVal = "";
}
{
	retVal = logicalExpression()
	{ return retVal; }
}

String logicalExpression() throws ParseException:
{
	String retVal = "";
	String temp = "";
}
{
	retVal = booleanExpression()
	(
		<OR>
		temp = booleanExpression() { retVal = retVal + "||" + temp; }
	)*
	{ return retVal; }
}

String booleanExpression() throws ParseException:
{
	String retVal = "";
	String temp = "";
}
{
	retVal = equalityExpression()
	(
		<AND>
		temp = equalityExpression() { retVal = retVal + "&&" + temp; }
	)*
	{ return retVal; }
}

String equalityExpression() throws ParseException:
{
	Token t;
	String temp1 = "";
	String temp2 = "";
	String temp3 = "";
}
{
	temp1 = relationalExpression()
	(
		t = <EQUALITY_OP> { temp2 = t.image.replace("<>", "!="); }
		temp3 = relationalExpression()
	)*
	{ return temp1 + temp2 + temp3; }
}

String relationalExpression() throws ParseException:
{
	Token t;
	String temp1 = "";
	String temp2 = "";
	String temp3 = "";
}
{
	temp1 = additiveExpression()
	(
		t = <COMPARE_OP> { temp2 = t.image; }
		temp3 = additiveExpression()
	)*
	{ return temp1 + temp2 + temp3; }
}

String additiveExpression() throws ParseException:
{
	Token t;
	String temp1 = "";
	String temp2 = "";
	String temp3 = "";
}
{
	temp1 = multiplicativeExpression()
	(
		(
			t = <PLUS> { temp2 = t.image; }
		|
			t = <MINUS> { temp2 = t.image; }
		)
		temp3 = multiplicativeExpression()
	)*
	{ return temp1 + temp2 + temp3; }
}

String multiplicativeExpression() throws ParseException:
{
	Token t;
	String temp1 = "";
	String temp2 = "";
	String temp3 = "";
}
{
	temp1 = unaryExpression()
	(
		(
			t = <TIMES> { temp2 = t.image; }
		|
			t = <SLASH> { temp2 = t.image; }
		)
		temp3 = unaryExpression()
	)*
	{ return temp1 + temp2 + temp3; }
}

String unaryExpression() throws ParseException:
{
	Token t;
	String temp = "";
}
{
	(
		temp = primaryExpression() { return temp; }
	|
		<NOT>
		temp = primaryExpression() { return "!" + temp; }
	|
		<MINUS>
		temp = primaryExpression()  { return "-" + temp; }
	)
}

String primaryExpression() throws ParseException:
{
	Token t;
	String temp = "";
}
{
	(
		<LPARENS>
		temp = logicalExpression()
		<RPARENS>
	|
		LOOKAHEAD(2)
		temp = function()
	|
		temp = numid()
	)
	{ return temp; }
}

String numid() throws ParseException:
{
	Token t;
	String temp = "";
	boolean isnot = false;
}
{
	(
		t = <ID>  { return InstVar(t.image); }
	|	
		t = <FULLID> { return InstVar(t.image); }
	|
		t = <NUM> { return t.image; }
	)
}
